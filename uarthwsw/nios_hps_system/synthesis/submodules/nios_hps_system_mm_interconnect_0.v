// nios_hps_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module nios_hps_system_mm_interconnect_0 (
		input  wire        pll_0_outclk0_clk,                                //                              pll_0_outclk0.clk
		input  wire        pll_0_outclk1_clk,                                //                              pll_0_outclk1.clk
		input  wire        jtag_uart_0_reset_reset_bridge_in_reset_reset,    //    jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire        nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, // nios2_qsys_0_reset_n_reset_bridge_in_reset.reset
		input  wire [27:0] nios2_qsys_0_data_master_address,                 //                   nios2_qsys_0_data_master.address
		output wire        nios2_qsys_0_data_master_waitrequest,             //                                           .waitrequest
		input  wire [3:0]  nios2_qsys_0_data_master_byteenable,              //                                           .byteenable
		input  wire        nios2_qsys_0_data_master_read,                    //                                           .read
		output wire [31:0] nios2_qsys_0_data_master_readdata,                //                                           .readdata
		input  wire        nios2_qsys_0_data_master_write,                   //                                           .write
		input  wire [31:0] nios2_qsys_0_data_master_writedata,               //                                           .writedata
		input  wire        nios2_qsys_0_data_master_debugaccess,             //                                           .debugaccess
		input  wire [27:0] nios2_qsys_0_instruction_master_address,          //            nios2_qsys_0_instruction_master.address
		output wire        nios2_qsys_0_instruction_master_waitrequest,      //                                           .waitrequest
		input  wire        nios2_qsys_0_instruction_master_read,             //                                           .read
		output wire [31:0] nios2_qsys_0_instruction_master_readdata,         //                                           .readdata
		output wire [3:0]  i2c_0_csr_address,                                //                                  i2c_0_csr.address
		output wire        i2c_0_csr_write,                                  //                                           .write
		output wire        i2c_0_csr_read,                                   //                                           .read
		input  wire [31:0] i2c_0_csr_readdata,                               //                                           .readdata
		output wire [31:0] i2c_0_csr_writedata,                              //                                           .writedata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,            //              jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,              //                                           .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,               //                                           .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,           //                                           .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,          //                                           .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,        //                                           .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,         //                                           .chipselect
		output wire [8:0]  nios2_qsys_0_jtag_debug_module_address,           //             nios2_qsys_0_jtag_debug_module.address
		output wire        nios2_qsys_0_jtag_debug_module_write,             //                                           .write
		output wire        nios2_qsys_0_jtag_debug_module_read,              //                                           .read
		input  wire [31:0] nios2_qsys_0_jtag_debug_module_readdata,          //                                           .readdata
		output wire [31:0] nios2_qsys_0_jtag_debug_module_writedata,         //                                           .writedata
		output wire [3:0]  nios2_qsys_0_jtag_debug_module_byteenable,        //                                           .byteenable
		input  wire        nios2_qsys_0_jtag_debug_module_waitrequest,       //                                           .waitrequest
		output wire        nios2_qsys_0_jtag_debug_module_debugaccess,       //                                           .debugaccess
		output wire [1:0]  nios_7seg_s1_address,                             //                               nios_7seg_s1.address
		output wire        nios_7seg_s1_write,                               //                                           .write
		input  wire [31:0] nios_7seg_s1_readdata,                            //                                           .readdata
		output wire [31:0] nios_7seg_s1_writedata,                           //                                           .writedata
		output wire        nios_7seg_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  nios_buttons_s1_address,                          //                            nios_buttons_s1.address
		input  wire [31:0] nios_buttons_s1_readdata,                         //                                           .readdata
		output wire [1:0]  nios_header_conn_s1_address,                      //                        nios_header_conn_s1.address
		output wire        nios_header_conn_s1_write,                        //                                           .write
		input  wire [31:0] nios_header_conn_s1_readdata,                     //                                           .readdata
		output wire [31:0] nios_header_conn_s1_writedata,                    //                                           .writedata
		output wire        nios_header_conn_s1_chipselect,                   //                                           .chipselect
		output wire [1:0]  nios_i2cclk_s1_address,                           //                             nios_i2cclk_s1.address
		output wire        nios_i2cclk_s1_write,                             //                                           .write
		input  wire [31:0] nios_i2cclk_s1_readdata,                          //                                           .readdata
		output wire [31:0] nios_i2cclk_s1_writedata,                         //                                           .writedata
		output wire        nios_i2cclk_s1_chipselect,                        //                                           .chipselect
		output wire [1:0]  nios_i2cdat_s1_address,                           //                             nios_i2cdat_s1.address
		output wire        nios_i2cdat_s1_write,                             //                                           .write
		input  wire [31:0] nios_i2cdat_s1_readdata,                          //                                           .readdata
		output wire [31:0] nios_i2cdat_s1_writedata,                         //                                           .writedata
		output wire        nios_i2cdat_s1_chipselect,                        //                                           .chipselect
		output wire [1:0]  nios_i2crw_s1_address,                            //                              nios_i2crw_s1.address
		output wire        nios_i2crw_s1_write,                              //                                           .write
		input  wire [31:0] nios_i2crw_s1_readdata,                           //                                           .readdata
		output wire [31:0] nios_i2crw_s1_writedata,                          //                                           .writedata
		output wire        nios_i2crw_s1_chipselect,                         //                                           .chipselect
		output wire [1:0]  nios_leds_s1_address,                             //                               nios_leds_s1.address
		output wire        nios_leds_s1_write,                               //                                           .write
		input  wire [31:0] nios_leds_s1_readdata,                            //                                           .readdata
		output wire [31:0] nios_leds_s1_writedata,                           //                                           .writedata
		output wire        nios_leds_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  nios_oscdivisor_s1_address,                       //                         nios_oscdivisor_s1.address
		output wire        nios_oscdivisor_s1_write,                         //                                           .write
		input  wire [31:0] nios_oscdivisor_s1_readdata,                      //                                           .readdata
		output wire [31:0] nios_oscdivisor_s1_writedata,                     //                                           .writedata
		output wire        nios_oscdivisor_s1_chipselect,                    //                                           .chipselect
		output wire [1:0]  nios_switches_s1_address,                         //                           nios_switches_s1.address
		input  wire [31:0] nios_switches_s1_readdata,                        //                                           .readdata
		output wire [1:0]  nios_uartrx_s1_address,                           //                             nios_uartrx_s1.address
		input  wire [31:0] nios_uartrx_s1_readdata,                          //                                           .readdata
		output wire [1:0]  nios_uarttx_s1_address,                           //                             nios_uarttx_s1.address
		output wire        nios_uarttx_s1_write,                             //                                           .write
		input  wire [31:0] nios_uarttx_s1_readdata,                          //                                           .readdata
		output wire [31:0] nios_uarttx_s1_writedata,                         //                                           .writedata
		output wire        nios_uarttx_s1_chipselect,                        //                                           .chipselect
		output wire [24:0] sdram_controller_0_s1_address,                    //                      sdram_controller_0_s1.address
		output wire        sdram_controller_0_s1_write,                      //                                           .write
		output wire        sdram_controller_0_s1_read,                       //                                           .read
		input  wire [15:0] sdram_controller_0_s1_readdata,                   //                                           .readdata
		output wire [15:0] sdram_controller_0_s1_writedata,                  //                                           .writedata
		output wire [1:0]  sdram_controller_0_s1_byteenable,                 //                                           .byteenable
		input  wire        sdram_controller_0_s1_readdatavalid,              //                                           .readdatavalid
		input  wire        sdram_controller_0_s1_waitrequest,                //                                           .waitrequest
		output wire        sdram_controller_0_s1_chipselect,                 //                                           .chipselect
		output wire [2:0]  spi_0_spi_control_port_address,                   //                     spi_0_spi_control_port.address
		output wire        spi_0_spi_control_port_write,                     //                                           .write
		output wire        spi_0_spi_control_port_read,                      //                                           .read
		input  wire [15:0] spi_0_spi_control_port_readdata,                  //                                           .readdata
		output wire [15:0] spi_0_spi_control_port_writedata,                 //                                           .writedata
		output wire        spi_0_spi_control_port_chipselect,                //                                           .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,               //                 sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,              //                                           .readdata
		output wire [2:0]  timer_0_s1_address,                               //                                 timer_0_s1.address
		output wire        timer_0_s1_write,                                 //                                           .write
		input  wire [15:0] timer_0_s1_readdata,                              //                                           .readdata
		output wire [15:0] timer_0_s1_writedata,                             //                                           .writedata
		output wire        timer_0_s1_chipselect,                            //                                           .chipselect
		output wire [2:0]  uart_0_s1_address,                                //                                  uart_0_s1.address
		output wire        uart_0_s1_write,                                  //                                           .write
		output wire        uart_0_s1_read,                                   //                                           .read
		input  wire [15:0] uart_0_s1_readdata,                               //                                           .readdata
		output wire [15:0] uart_0_s1_writedata,                              //                                           .writedata
		output wire        uart_0_s1_begintransfer,                          //                                           .begintransfer
		output wire        uart_0_s1_chipselect                              //                                           .chipselect
	);

	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_qsys_0_data_master_agent:av_waitrequest -> nios2_qsys_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_qsys_0_data_master_agent:av_readdata -> nios2_qsys_0_data_master_translator:uav_readdata
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_qsys_0_data_master_translator:uav_debugaccess -> nios2_qsys_0_data_master_agent:av_debugaccess
	wire   [27:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_address;              // nios2_qsys_0_data_master_translator:uav_address -> nios2_qsys_0_data_master_agent:av_address
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_qsys_0_data_master_translator:uav_read -> nios2_qsys_0_data_master_agent:av_read
	wire    [3:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_qsys_0_data_master_translator:uav_byteenable -> nios2_qsys_0_data_master_agent:av_byteenable
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_qsys_0_data_master_agent:av_readdatavalid -> nios2_qsys_0_data_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_qsys_0_data_master_translator:uav_lock -> nios2_qsys_0_data_master_agent:av_lock
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_write;                // nios2_qsys_0_data_master_translator:uav_write -> nios2_qsys_0_data_master_agent:av_write
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_qsys_0_data_master_translator:uav_writedata -> nios2_qsys_0_data_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_qsys_0_data_master_translator:uav_burstcount -> nios2_qsys_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_qsys_0_data_master_agent:rp_valid
	wire  [107:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_qsys_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_qsys_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [18:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_qsys_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_qsys_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_qsys_0_data_master_agent:rp_endofpacket
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_qsys_0_instruction_master_agent:av_waitrequest -> nios2_qsys_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_qsys_0_instruction_master_agent:av_readdata -> nios2_qsys_0_instruction_master_translator:uav_readdata
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_qsys_0_instruction_master_translator:uav_debugaccess -> nios2_qsys_0_instruction_master_agent:av_debugaccess
	wire   [27:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_qsys_0_instruction_master_translator:uav_address -> nios2_qsys_0_instruction_master_agent:av_address
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_qsys_0_instruction_master_translator:uav_read -> nios2_qsys_0_instruction_master_agent:av_read
	wire    [3:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_qsys_0_instruction_master_translator:uav_byteenable -> nios2_qsys_0_instruction_master_agent:av_byteenable
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_qsys_0_instruction_master_agent:av_readdatavalid -> nios2_qsys_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_qsys_0_instruction_master_translator:uav_lock -> nios2_qsys_0_instruction_master_agent:av_lock
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_qsys_0_instruction_master_translator:uav_write -> nios2_qsys_0_instruction_master_agent:av_write
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_qsys_0_instruction_master_translator:uav_writedata -> nios2_qsys_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_qsys_0_instruction_master_translator:uav_burstcount -> nios2_qsys_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_qsys_0_instruction_master_agent:rp_valid
	wire  [107:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_qsys_0_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_qsys_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [18:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_qsys_0_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_qsys_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_qsys_0_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [107:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [18:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                       // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [27:0] sysid_qsys_0_control_slave_agent_m0_address;                                        // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                     // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                           // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                           // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                      // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                          // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                     // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                   // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                    // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                   // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [108:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                              // sysid_qsys_0_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [18:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire   [31:0] i2c_0_csr_agent_m0_readdata;                                                        // i2c_0_csr_translator:uav_readdata -> i2c_0_csr_agent:m0_readdata
	wire          i2c_0_csr_agent_m0_waitrequest;                                                     // i2c_0_csr_translator:uav_waitrequest -> i2c_0_csr_agent:m0_waitrequest
	wire          i2c_0_csr_agent_m0_debugaccess;                                                     // i2c_0_csr_agent:m0_debugaccess -> i2c_0_csr_translator:uav_debugaccess
	wire   [27:0] i2c_0_csr_agent_m0_address;                                                         // i2c_0_csr_agent:m0_address -> i2c_0_csr_translator:uav_address
	wire    [3:0] i2c_0_csr_agent_m0_byteenable;                                                      // i2c_0_csr_agent:m0_byteenable -> i2c_0_csr_translator:uav_byteenable
	wire          i2c_0_csr_agent_m0_read;                                                            // i2c_0_csr_agent:m0_read -> i2c_0_csr_translator:uav_read
	wire          i2c_0_csr_agent_m0_readdatavalid;                                                   // i2c_0_csr_translator:uav_readdatavalid -> i2c_0_csr_agent:m0_readdatavalid
	wire          i2c_0_csr_agent_m0_lock;                                                            // i2c_0_csr_agent:m0_lock -> i2c_0_csr_translator:uav_lock
	wire   [31:0] i2c_0_csr_agent_m0_writedata;                                                       // i2c_0_csr_agent:m0_writedata -> i2c_0_csr_translator:uav_writedata
	wire          i2c_0_csr_agent_m0_write;                                                           // i2c_0_csr_agent:m0_write -> i2c_0_csr_translator:uav_write
	wire    [2:0] i2c_0_csr_agent_m0_burstcount;                                                      // i2c_0_csr_agent:m0_burstcount -> i2c_0_csr_translator:uav_burstcount
	wire          i2c_0_csr_agent_rf_source_valid;                                                    // i2c_0_csr_agent:rf_source_valid -> i2c_0_csr_agent_rsp_fifo:in_valid
	wire  [108:0] i2c_0_csr_agent_rf_source_data;                                                     // i2c_0_csr_agent:rf_source_data -> i2c_0_csr_agent_rsp_fifo:in_data
	wire          i2c_0_csr_agent_rf_source_ready;                                                    // i2c_0_csr_agent_rsp_fifo:in_ready -> i2c_0_csr_agent:rf_source_ready
	wire          i2c_0_csr_agent_rf_source_startofpacket;                                            // i2c_0_csr_agent:rf_source_startofpacket -> i2c_0_csr_agent_rsp_fifo:in_startofpacket
	wire          i2c_0_csr_agent_rf_source_endofpacket;                                              // i2c_0_csr_agent:rf_source_endofpacket -> i2c_0_csr_agent_rsp_fifo:in_endofpacket
	wire          i2c_0_csr_agent_rsp_fifo_out_valid;                                                 // i2c_0_csr_agent_rsp_fifo:out_valid -> i2c_0_csr_agent:rf_sink_valid
	wire  [108:0] i2c_0_csr_agent_rsp_fifo_out_data;                                                  // i2c_0_csr_agent_rsp_fifo:out_data -> i2c_0_csr_agent:rf_sink_data
	wire          i2c_0_csr_agent_rsp_fifo_out_ready;                                                 // i2c_0_csr_agent:rf_sink_ready -> i2c_0_csr_agent_rsp_fifo:out_ready
	wire          i2c_0_csr_agent_rsp_fifo_out_startofpacket;                                         // i2c_0_csr_agent_rsp_fifo:out_startofpacket -> i2c_0_csr_agent:rf_sink_startofpacket
	wire          i2c_0_csr_agent_rsp_fifo_out_endofpacket;                                           // i2c_0_csr_agent_rsp_fifo:out_endofpacket -> i2c_0_csr_agent:rf_sink_endofpacket
	wire          i2c_0_csr_agent_rdata_fifo_src_valid;                                               // i2c_0_csr_agent:rdata_fifo_src_valid -> i2c_0_csr_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_0_csr_agent_rdata_fifo_src_data;                                                // i2c_0_csr_agent:rdata_fifo_src_data -> i2c_0_csr_agent_rdata_fifo:in_data
	wire          i2c_0_csr_agent_rdata_fifo_src_ready;                                               // i2c_0_csr_agent_rdata_fifo:in_ready -> i2c_0_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> i2c_0_csr_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> i2c_0_csr_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // i2c_0_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [18:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> i2c_0_csr_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> i2c_0_csr_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> i2c_0_csr_agent:cp_endofpacket
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_readdata;                                   // nios2_qsys_0_jtag_debug_module_translator:uav_readdata -> nios2_qsys_0_jtag_debug_module_agent:m0_readdata
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest;                                // nios2_qsys_0_jtag_debug_module_translator:uav_waitrequest -> nios2_qsys_0_jtag_debug_module_agent:m0_waitrequest
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess;                                // nios2_qsys_0_jtag_debug_module_agent:m0_debugaccess -> nios2_qsys_0_jtag_debug_module_translator:uav_debugaccess
	wire   [27:0] nios2_qsys_0_jtag_debug_module_agent_m0_address;                                    // nios2_qsys_0_jtag_debug_module_agent:m0_address -> nios2_qsys_0_jtag_debug_module_translator:uav_address
	wire    [3:0] nios2_qsys_0_jtag_debug_module_agent_m0_byteenable;                                 // nios2_qsys_0_jtag_debug_module_agent:m0_byteenable -> nios2_qsys_0_jtag_debug_module_translator:uav_byteenable
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_read;                                       // nios2_qsys_0_jtag_debug_module_agent:m0_read -> nios2_qsys_0_jtag_debug_module_translator:uav_read
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid;                              // nios2_qsys_0_jtag_debug_module_translator:uav_readdatavalid -> nios2_qsys_0_jtag_debug_module_agent:m0_readdatavalid
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_lock;                                       // nios2_qsys_0_jtag_debug_module_agent:m0_lock -> nios2_qsys_0_jtag_debug_module_translator:uav_lock
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_writedata;                                  // nios2_qsys_0_jtag_debug_module_agent:m0_writedata -> nios2_qsys_0_jtag_debug_module_translator:uav_writedata
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_write;                                      // nios2_qsys_0_jtag_debug_module_agent:m0_write -> nios2_qsys_0_jtag_debug_module_translator:uav_write
	wire    [2:0] nios2_qsys_0_jtag_debug_module_agent_m0_burstcount;                                 // nios2_qsys_0_jtag_debug_module_agent:m0_burstcount -> nios2_qsys_0_jtag_debug_module_translator:uav_burstcount
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_valid;                               // nios2_qsys_0_jtag_debug_module_agent:rf_source_valid -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_qsys_0_jtag_debug_module_agent_rf_source_data;                                // nios2_qsys_0_jtag_debug_module_agent:rf_source_data -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_ready;                               // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_qsys_0_jtag_debug_module_agent:rf_source_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket;                       // nios2_qsys_0_jtag_debug_module_agent:rf_source_startofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket;                         // nios2_qsys_0_jtag_debug_module_agent:rf_source_endofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid;                            // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_valid
	wire  [108:0] nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data;                             // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready;                            // nios2_qsys_0_jtag_debug_module_agent:rf_sink_ready -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> nios2_qsys_0_jtag_debug_module_agent:cp_valid
	wire  [107:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> nios2_qsys_0_jtag_debug_module_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // nios2_qsys_0_jtag_debug_module_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [18:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> nios2_qsys_0_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_endofpacket
	wire   [15:0] sdram_controller_0_s1_agent_m0_readdata;                                            // sdram_controller_0_s1_translator:uav_readdata -> sdram_controller_0_s1_agent:m0_readdata
	wire          sdram_controller_0_s1_agent_m0_waitrequest;                                         // sdram_controller_0_s1_translator:uav_waitrequest -> sdram_controller_0_s1_agent:m0_waitrequest
	wire          sdram_controller_0_s1_agent_m0_debugaccess;                                         // sdram_controller_0_s1_agent:m0_debugaccess -> sdram_controller_0_s1_translator:uav_debugaccess
	wire   [27:0] sdram_controller_0_s1_agent_m0_address;                                             // sdram_controller_0_s1_agent:m0_address -> sdram_controller_0_s1_translator:uav_address
	wire    [1:0] sdram_controller_0_s1_agent_m0_byteenable;                                          // sdram_controller_0_s1_agent:m0_byteenable -> sdram_controller_0_s1_translator:uav_byteenable
	wire          sdram_controller_0_s1_agent_m0_read;                                                // sdram_controller_0_s1_agent:m0_read -> sdram_controller_0_s1_translator:uav_read
	wire          sdram_controller_0_s1_agent_m0_readdatavalid;                                       // sdram_controller_0_s1_translator:uav_readdatavalid -> sdram_controller_0_s1_agent:m0_readdatavalid
	wire          sdram_controller_0_s1_agent_m0_lock;                                                // sdram_controller_0_s1_agent:m0_lock -> sdram_controller_0_s1_translator:uav_lock
	wire   [15:0] sdram_controller_0_s1_agent_m0_writedata;                                           // sdram_controller_0_s1_agent:m0_writedata -> sdram_controller_0_s1_translator:uav_writedata
	wire          sdram_controller_0_s1_agent_m0_write;                                               // sdram_controller_0_s1_agent:m0_write -> sdram_controller_0_s1_translator:uav_write
	wire    [1:0] sdram_controller_0_s1_agent_m0_burstcount;                                          // sdram_controller_0_s1_agent:m0_burstcount -> sdram_controller_0_s1_translator:uav_burstcount
	wire          sdram_controller_0_s1_agent_rf_source_valid;                                        // sdram_controller_0_s1_agent:rf_source_valid -> sdram_controller_0_s1_agent_rsp_fifo:in_valid
	wire   [90:0] sdram_controller_0_s1_agent_rf_source_data;                                         // sdram_controller_0_s1_agent:rf_source_data -> sdram_controller_0_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_0_s1_agent_rf_source_ready;                                        // sdram_controller_0_s1_agent_rsp_fifo:in_ready -> sdram_controller_0_s1_agent:rf_source_ready
	wire          sdram_controller_0_s1_agent_rf_source_startofpacket;                                // sdram_controller_0_s1_agent:rf_source_startofpacket -> sdram_controller_0_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_0_s1_agent_rf_source_endofpacket;                                  // sdram_controller_0_s1_agent:rf_source_endofpacket -> sdram_controller_0_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_valid;                                     // sdram_controller_0_s1_agent_rsp_fifo:out_valid -> sdram_controller_0_s1_agent:rf_sink_valid
	wire   [90:0] sdram_controller_0_s1_agent_rsp_fifo_out_data;                                      // sdram_controller_0_s1_agent_rsp_fifo:out_data -> sdram_controller_0_s1_agent:rf_sink_data
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_ready;                                     // sdram_controller_0_s1_agent:rf_sink_ready -> sdram_controller_0_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket;                             // sdram_controller_0_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_0_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket;                               // sdram_controller_0_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_0_s1_agent:rf_sink_endofpacket
	wire          sdram_controller_0_s1_agent_rdata_fifo_src_valid;                                   // sdram_controller_0_s1_agent:rdata_fifo_src_valid -> sdram_controller_0_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_controller_0_s1_agent_rdata_fifo_src_data;                                    // sdram_controller_0_s1_agent:rdata_fifo_src_data -> sdram_controller_0_s1_agent_rdata_fifo:in_data
	wire          sdram_controller_0_s1_agent_rdata_fifo_src_ready;                                   // sdram_controller_0_s1_agent_rdata_fifo:in_ready -> sdram_controller_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nios_leds_s1_agent_m0_readdata;                                                     // nios_leds_s1_translator:uav_readdata -> nios_leds_s1_agent:m0_readdata
	wire          nios_leds_s1_agent_m0_waitrequest;                                                  // nios_leds_s1_translator:uav_waitrequest -> nios_leds_s1_agent:m0_waitrequest
	wire          nios_leds_s1_agent_m0_debugaccess;                                                  // nios_leds_s1_agent:m0_debugaccess -> nios_leds_s1_translator:uav_debugaccess
	wire   [27:0] nios_leds_s1_agent_m0_address;                                                      // nios_leds_s1_agent:m0_address -> nios_leds_s1_translator:uav_address
	wire    [3:0] nios_leds_s1_agent_m0_byteenable;                                                   // nios_leds_s1_agent:m0_byteenable -> nios_leds_s1_translator:uav_byteenable
	wire          nios_leds_s1_agent_m0_read;                                                         // nios_leds_s1_agent:m0_read -> nios_leds_s1_translator:uav_read
	wire          nios_leds_s1_agent_m0_readdatavalid;                                                // nios_leds_s1_translator:uav_readdatavalid -> nios_leds_s1_agent:m0_readdatavalid
	wire          nios_leds_s1_agent_m0_lock;                                                         // nios_leds_s1_agent:m0_lock -> nios_leds_s1_translator:uav_lock
	wire   [31:0] nios_leds_s1_agent_m0_writedata;                                                    // nios_leds_s1_agent:m0_writedata -> nios_leds_s1_translator:uav_writedata
	wire          nios_leds_s1_agent_m0_write;                                                        // nios_leds_s1_agent:m0_write -> nios_leds_s1_translator:uav_write
	wire    [2:0] nios_leds_s1_agent_m0_burstcount;                                                   // nios_leds_s1_agent:m0_burstcount -> nios_leds_s1_translator:uav_burstcount
	wire          nios_leds_s1_agent_rf_source_valid;                                                 // nios_leds_s1_agent:rf_source_valid -> nios_leds_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_leds_s1_agent_rf_source_data;                                                  // nios_leds_s1_agent:rf_source_data -> nios_leds_s1_agent_rsp_fifo:in_data
	wire          nios_leds_s1_agent_rf_source_ready;                                                 // nios_leds_s1_agent_rsp_fifo:in_ready -> nios_leds_s1_agent:rf_source_ready
	wire          nios_leds_s1_agent_rf_source_startofpacket;                                         // nios_leds_s1_agent:rf_source_startofpacket -> nios_leds_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_leds_s1_agent_rf_source_endofpacket;                                           // nios_leds_s1_agent:rf_source_endofpacket -> nios_leds_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_leds_s1_agent_rsp_fifo_out_valid;                                              // nios_leds_s1_agent_rsp_fifo:out_valid -> nios_leds_s1_agent:rf_sink_valid
	wire  [108:0] nios_leds_s1_agent_rsp_fifo_out_data;                                               // nios_leds_s1_agent_rsp_fifo:out_data -> nios_leds_s1_agent:rf_sink_data
	wire          nios_leds_s1_agent_rsp_fifo_out_ready;                                              // nios_leds_s1_agent:rf_sink_ready -> nios_leds_s1_agent_rsp_fifo:out_ready
	wire          nios_leds_s1_agent_rsp_fifo_out_startofpacket;                                      // nios_leds_s1_agent_rsp_fifo:out_startofpacket -> nios_leds_s1_agent:rf_sink_startofpacket
	wire          nios_leds_s1_agent_rsp_fifo_out_endofpacket;                                        // nios_leds_s1_agent_rsp_fifo:out_endofpacket -> nios_leds_s1_agent:rf_sink_endofpacket
	wire          nios_leds_s1_agent_rdata_fifo_src_valid;                                            // nios_leds_s1_agent:rdata_fifo_src_valid -> nios_leds_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_leds_s1_agent_rdata_fifo_src_data;                                             // nios_leds_s1_agent:rdata_fifo_src_data -> nios_leds_s1_agent_rdata_fifo:in_data
	wire          nios_leds_s1_agent_rdata_fifo_src_ready;                                            // nios_leds_s1_agent_rdata_fifo:in_ready -> nios_leds_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> nios_leds_s1_agent:cp_valid
	wire  [107:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> nios_leds_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // nios_leds_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [18:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> nios_leds_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> nios_leds_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> nios_leds_s1_agent:cp_endofpacket
	wire   [31:0] nios_switches_s1_agent_m0_readdata;                                                 // nios_switches_s1_translator:uav_readdata -> nios_switches_s1_agent:m0_readdata
	wire          nios_switches_s1_agent_m0_waitrequest;                                              // nios_switches_s1_translator:uav_waitrequest -> nios_switches_s1_agent:m0_waitrequest
	wire          nios_switches_s1_agent_m0_debugaccess;                                              // nios_switches_s1_agent:m0_debugaccess -> nios_switches_s1_translator:uav_debugaccess
	wire   [27:0] nios_switches_s1_agent_m0_address;                                                  // nios_switches_s1_agent:m0_address -> nios_switches_s1_translator:uav_address
	wire    [3:0] nios_switches_s1_agent_m0_byteenable;                                               // nios_switches_s1_agent:m0_byteenable -> nios_switches_s1_translator:uav_byteenable
	wire          nios_switches_s1_agent_m0_read;                                                     // nios_switches_s1_agent:m0_read -> nios_switches_s1_translator:uav_read
	wire          nios_switches_s1_agent_m0_readdatavalid;                                            // nios_switches_s1_translator:uav_readdatavalid -> nios_switches_s1_agent:m0_readdatavalid
	wire          nios_switches_s1_agent_m0_lock;                                                     // nios_switches_s1_agent:m0_lock -> nios_switches_s1_translator:uav_lock
	wire   [31:0] nios_switches_s1_agent_m0_writedata;                                                // nios_switches_s1_agent:m0_writedata -> nios_switches_s1_translator:uav_writedata
	wire          nios_switches_s1_agent_m0_write;                                                    // nios_switches_s1_agent:m0_write -> nios_switches_s1_translator:uav_write
	wire    [2:0] nios_switches_s1_agent_m0_burstcount;                                               // nios_switches_s1_agent:m0_burstcount -> nios_switches_s1_translator:uav_burstcount
	wire          nios_switches_s1_agent_rf_source_valid;                                             // nios_switches_s1_agent:rf_source_valid -> nios_switches_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_switches_s1_agent_rf_source_data;                                              // nios_switches_s1_agent:rf_source_data -> nios_switches_s1_agent_rsp_fifo:in_data
	wire          nios_switches_s1_agent_rf_source_ready;                                             // nios_switches_s1_agent_rsp_fifo:in_ready -> nios_switches_s1_agent:rf_source_ready
	wire          nios_switches_s1_agent_rf_source_startofpacket;                                     // nios_switches_s1_agent:rf_source_startofpacket -> nios_switches_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_switches_s1_agent_rf_source_endofpacket;                                       // nios_switches_s1_agent:rf_source_endofpacket -> nios_switches_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_switches_s1_agent_rsp_fifo_out_valid;                                          // nios_switches_s1_agent_rsp_fifo:out_valid -> nios_switches_s1_agent:rf_sink_valid
	wire  [108:0] nios_switches_s1_agent_rsp_fifo_out_data;                                           // nios_switches_s1_agent_rsp_fifo:out_data -> nios_switches_s1_agent:rf_sink_data
	wire          nios_switches_s1_agent_rsp_fifo_out_ready;                                          // nios_switches_s1_agent:rf_sink_ready -> nios_switches_s1_agent_rsp_fifo:out_ready
	wire          nios_switches_s1_agent_rsp_fifo_out_startofpacket;                                  // nios_switches_s1_agent_rsp_fifo:out_startofpacket -> nios_switches_s1_agent:rf_sink_startofpacket
	wire          nios_switches_s1_agent_rsp_fifo_out_endofpacket;                                    // nios_switches_s1_agent_rsp_fifo:out_endofpacket -> nios_switches_s1_agent:rf_sink_endofpacket
	wire          nios_switches_s1_agent_rdata_fifo_src_valid;                                        // nios_switches_s1_agent:rdata_fifo_src_valid -> nios_switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_switches_s1_agent_rdata_fifo_src_data;                                         // nios_switches_s1_agent:rdata_fifo_src_data -> nios_switches_s1_agent_rdata_fifo:in_data
	wire          nios_switches_s1_agent_rdata_fifo_src_ready;                                        // nios_switches_s1_agent_rdata_fifo:in_ready -> nios_switches_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> nios_switches_s1_agent:cp_valid
	wire  [107:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> nios_switches_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // nios_switches_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [18:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> nios_switches_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> nios_switches_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> nios_switches_s1_agent:cp_endofpacket
	wire   [31:0] nios_buttons_s1_agent_m0_readdata;                                                  // nios_buttons_s1_translator:uav_readdata -> nios_buttons_s1_agent:m0_readdata
	wire          nios_buttons_s1_agent_m0_waitrequest;                                               // nios_buttons_s1_translator:uav_waitrequest -> nios_buttons_s1_agent:m0_waitrequest
	wire          nios_buttons_s1_agent_m0_debugaccess;                                               // nios_buttons_s1_agent:m0_debugaccess -> nios_buttons_s1_translator:uav_debugaccess
	wire   [27:0] nios_buttons_s1_agent_m0_address;                                                   // nios_buttons_s1_agent:m0_address -> nios_buttons_s1_translator:uav_address
	wire    [3:0] nios_buttons_s1_agent_m0_byteenable;                                                // nios_buttons_s1_agent:m0_byteenable -> nios_buttons_s1_translator:uav_byteenable
	wire          nios_buttons_s1_agent_m0_read;                                                      // nios_buttons_s1_agent:m0_read -> nios_buttons_s1_translator:uav_read
	wire          nios_buttons_s1_agent_m0_readdatavalid;                                             // nios_buttons_s1_translator:uav_readdatavalid -> nios_buttons_s1_agent:m0_readdatavalid
	wire          nios_buttons_s1_agent_m0_lock;                                                      // nios_buttons_s1_agent:m0_lock -> nios_buttons_s1_translator:uav_lock
	wire   [31:0] nios_buttons_s1_agent_m0_writedata;                                                 // nios_buttons_s1_agent:m0_writedata -> nios_buttons_s1_translator:uav_writedata
	wire          nios_buttons_s1_agent_m0_write;                                                     // nios_buttons_s1_agent:m0_write -> nios_buttons_s1_translator:uav_write
	wire    [2:0] nios_buttons_s1_agent_m0_burstcount;                                                // nios_buttons_s1_agent:m0_burstcount -> nios_buttons_s1_translator:uav_burstcount
	wire          nios_buttons_s1_agent_rf_source_valid;                                              // nios_buttons_s1_agent:rf_source_valid -> nios_buttons_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_buttons_s1_agent_rf_source_data;                                               // nios_buttons_s1_agent:rf_source_data -> nios_buttons_s1_agent_rsp_fifo:in_data
	wire          nios_buttons_s1_agent_rf_source_ready;                                              // nios_buttons_s1_agent_rsp_fifo:in_ready -> nios_buttons_s1_agent:rf_source_ready
	wire          nios_buttons_s1_agent_rf_source_startofpacket;                                      // nios_buttons_s1_agent:rf_source_startofpacket -> nios_buttons_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_buttons_s1_agent_rf_source_endofpacket;                                        // nios_buttons_s1_agent:rf_source_endofpacket -> nios_buttons_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_buttons_s1_agent_rsp_fifo_out_valid;                                           // nios_buttons_s1_agent_rsp_fifo:out_valid -> nios_buttons_s1_agent:rf_sink_valid
	wire  [108:0] nios_buttons_s1_agent_rsp_fifo_out_data;                                            // nios_buttons_s1_agent_rsp_fifo:out_data -> nios_buttons_s1_agent:rf_sink_data
	wire          nios_buttons_s1_agent_rsp_fifo_out_ready;                                           // nios_buttons_s1_agent:rf_sink_ready -> nios_buttons_s1_agent_rsp_fifo:out_ready
	wire          nios_buttons_s1_agent_rsp_fifo_out_startofpacket;                                   // nios_buttons_s1_agent_rsp_fifo:out_startofpacket -> nios_buttons_s1_agent:rf_sink_startofpacket
	wire          nios_buttons_s1_agent_rsp_fifo_out_endofpacket;                                     // nios_buttons_s1_agent_rsp_fifo:out_endofpacket -> nios_buttons_s1_agent:rf_sink_endofpacket
	wire          nios_buttons_s1_agent_rdata_fifo_src_valid;                                         // nios_buttons_s1_agent:rdata_fifo_src_valid -> nios_buttons_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_buttons_s1_agent_rdata_fifo_src_data;                                          // nios_buttons_s1_agent:rdata_fifo_src_data -> nios_buttons_s1_agent_rdata_fifo:in_data
	wire          nios_buttons_s1_agent_rdata_fifo_src_ready;                                         // nios_buttons_s1_agent_rdata_fifo:in_ready -> nios_buttons_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> nios_buttons_s1_agent:cp_valid
	wire  [107:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> nios_buttons_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // nios_buttons_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [18:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> nios_buttons_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> nios_buttons_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> nios_buttons_s1_agent:cp_endofpacket
	wire   [31:0] nios_uartrx_s1_agent_m0_readdata;                                                   // nios_uartrx_s1_translator:uav_readdata -> nios_uartrx_s1_agent:m0_readdata
	wire          nios_uartrx_s1_agent_m0_waitrequest;                                                // nios_uartrx_s1_translator:uav_waitrequest -> nios_uartrx_s1_agent:m0_waitrequest
	wire          nios_uartrx_s1_agent_m0_debugaccess;                                                // nios_uartrx_s1_agent:m0_debugaccess -> nios_uartrx_s1_translator:uav_debugaccess
	wire   [27:0] nios_uartrx_s1_agent_m0_address;                                                    // nios_uartrx_s1_agent:m0_address -> nios_uartrx_s1_translator:uav_address
	wire    [3:0] nios_uartrx_s1_agent_m0_byteenable;                                                 // nios_uartrx_s1_agent:m0_byteenable -> nios_uartrx_s1_translator:uav_byteenable
	wire          nios_uartrx_s1_agent_m0_read;                                                       // nios_uartrx_s1_agent:m0_read -> nios_uartrx_s1_translator:uav_read
	wire          nios_uartrx_s1_agent_m0_readdatavalid;                                              // nios_uartrx_s1_translator:uav_readdatavalid -> nios_uartrx_s1_agent:m0_readdatavalid
	wire          nios_uartrx_s1_agent_m0_lock;                                                       // nios_uartrx_s1_agent:m0_lock -> nios_uartrx_s1_translator:uav_lock
	wire   [31:0] nios_uartrx_s1_agent_m0_writedata;                                                  // nios_uartrx_s1_agent:m0_writedata -> nios_uartrx_s1_translator:uav_writedata
	wire          nios_uartrx_s1_agent_m0_write;                                                      // nios_uartrx_s1_agent:m0_write -> nios_uartrx_s1_translator:uav_write
	wire    [2:0] nios_uartrx_s1_agent_m0_burstcount;                                                 // nios_uartrx_s1_agent:m0_burstcount -> nios_uartrx_s1_translator:uav_burstcount
	wire          nios_uartrx_s1_agent_rf_source_valid;                                               // nios_uartrx_s1_agent:rf_source_valid -> nios_uartrx_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_uartrx_s1_agent_rf_source_data;                                                // nios_uartrx_s1_agent:rf_source_data -> nios_uartrx_s1_agent_rsp_fifo:in_data
	wire          nios_uartrx_s1_agent_rf_source_ready;                                               // nios_uartrx_s1_agent_rsp_fifo:in_ready -> nios_uartrx_s1_agent:rf_source_ready
	wire          nios_uartrx_s1_agent_rf_source_startofpacket;                                       // nios_uartrx_s1_agent:rf_source_startofpacket -> nios_uartrx_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_uartrx_s1_agent_rf_source_endofpacket;                                         // nios_uartrx_s1_agent:rf_source_endofpacket -> nios_uartrx_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_uartrx_s1_agent_rsp_fifo_out_valid;                                            // nios_uartrx_s1_agent_rsp_fifo:out_valid -> nios_uartrx_s1_agent:rf_sink_valid
	wire  [108:0] nios_uartrx_s1_agent_rsp_fifo_out_data;                                             // nios_uartrx_s1_agent_rsp_fifo:out_data -> nios_uartrx_s1_agent:rf_sink_data
	wire          nios_uartrx_s1_agent_rsp_fifo_out_ready;                                            // nios_uartrx_s1_agent:rf_sink_ready -> nios_uartrx_s1_agent_rsp_fifo:out_ready
	wire          nios_uartrx_s1_agent_rsp_fifo_out_startofpacket;                                    // nios_uartrx_s1_agent_rsp_fifo:out_startofpacket -> nios_uartrx_s1_agent:rf_sink_startofpacket
	wire          nios_uartrx_s1_agent_rsp_fifo_out_endofpacket;                                      // nios_uartrx_s1_agent_rsp_fifo:out_endofpacket -> nios_uartrx_s1_agent:rf_sink_endofpacket
	wire          nios_uartrx_s1_agent_rdata_fifo_src_valid;                                          // nios_uartrx_s1_agent:rdata_fifo_src_valid -> nios_uartrx_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_uartrx_s1_agent_rdata_fifo_src_data;                                           // nios_uartrx_s1_agent:rdata_fifo_src_data -> nios_uartrx_s1_agent_rdata_fifo:in_data
	wire          nios_uartrx_s1_agent_rdata_fifo_src_ready;                                          // nios_uartrx_s1_agent_rdata_fifo:in_ready -> nios_uartrx_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> nios_uartrx_s1_agent:cp_valid
	wire  [107:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> nios_uartrx_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                              // nios_uartrx_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [18:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> nios_uartrx_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> nios_uartrx_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> nios_uartrx_s1_agent:cp_endofpacket
	wire   [31:0] nios_i2cclk_s1_agent_m0_readdata;                                                   // nios_i2cclk_s1_translator:uav_readdata -> nios_i2cclk_s1_agent:m0_readdata
	wire          nios_i2cclk_s1_agent_m0_waitrequest;                                                // nios_i2cclk_s1_translator:uav_waitrequest -> nios_i2cclk_s1_agent:m0_waitrequest
	wire          nios_i2cclk_s1_agent_m0_debugaccess;                                                // nios_i2cclk_s1_agent:m0_debugaccess -> nios_i2cclk_s1_translator:uav_debugaccess
	wire   [27:0] nios_i2cclk_s1_agent_m0_address;                                                    // nios_i2cclk_s1_agent:m0_address -> nios_i2cclk_s1_translator:uav_address
	wire    [3:0] nios_i2cclk_s1_agent_m0_byteenable;                                                 // nios_i2cclk_s1_agent:m0_byteenable -> nios_i2cclk_s1_translator:uav_byteenable
	wire          nios_i2cclk_s1_agent_m0_read;                                                       // nios_i2cclk_s1_agent:m0_read -> nios_i2cclk_s1_translator:uav_read
	wire          nios_i2cclk_s1_agent_m0_readdatavalid;                                              // nios_i2cclk_s1_translator:uav_readdatavalid -> nios_i2cclk_s1_agent:m0_readdatavalid
	wire          nios_i2cclk_s1_agent_m0_lock;                                                       // nios_i2cclk_s1_agent:m0_lock -> nios_i2cclk_s1_translator:uav_lock
	wire   [31:0] nios_i2cclk_s1_agent_m0_writedata;                                                  // nios_i2cclk_s1_agent:m0_writedata -> nios_i2cclk_s1_translator:uav_writedata
	wire          nios_i2cclk_s1_agent_m0_write;                                                      // nios_i2cclk_s1_agent:m0_write -> nios_i2cclk_s1_translator:uav_write
	wire    [2:0] nios_i2cclk_s1_agent_m0_burstcount;                                                 // nios_i2cclk_s1_agent:m0_burstcount -> nios_i2cclk_s1_translator:uav_burstcount
	wire          nios_i2cclk_s1_agent_rf_source_valid;                                               // nios_i2cclk_s1_agent:rf_source_valid -> nios_i2cclk_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_i2cclk_s1_agent_rf_source_data;                                                // nios_i2cclk_s1_agent:rf_source_data -> nios_i2cclk_s1_agent_rsp_fifo:in_data
	wire          nios_i2cclk_s1_agent_rf_source_ready;                                               // nios_i2cclk_s1_agent_rsp_fifo:in_ready -> nios_i2cclk_s1_agent:rf_source_ready
	wire          nios_i2cclk_s1_agent_rf_source_startofpacket;                                       // nios_i2cclk_s1_agent:rf_source_startofpacket -> nios_i2cclk_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_i2cclk_s1_agent_rf_source_endofpacket;                                         // nios_i2cclk_s1_agent:rf_source_endofpacket -> nios_i2cclk_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_i2cclk_s1_agent_rsp_fifo_out_valid;                                            // nios_i2cclk_s1_agent_rsp_fifo:out_valid -> nios_i2cclk_s1_agent:rf_sink_valid
	wire  [108:0] nios_i2cclk_s1_agent_rsp_fifo_out_data;                                             // nios_i2cclk_s1_agent_rsp_fifo:out_data -> nios_i2cclk_s1_agent:rf_sink_data
	wire          nios_i2cclk_s1_agent_rsp_fifo_out_ready;                                            // nios_i2cclk_s1_agent:rf_sink_ready -> nios_i2cclk_s1_agent_rsp_fifo:out_ready
	wire          nios_i2cclk_s1_agent_rsp_fifo_out_startofpacket;                                    // nios_i2cclk_s1_agent_rsp_fifo:out_startofpacket -> nios_i2cclk_s1_agent:rf_sink_startofpacket
	wire          nios_i2cclk_s1_agent_rsp_fifo_out_endofpacket;                                      // nios_i2cclk_s1_agent_rsp_fifo:out_endofpacket -> nios_i2cclk_s1_agent:rf_sink_endofpacket
	wire          nios_i2cclk_s1_agent_rdata_fifo_src_valid;                                          // nios_i2cclk_s1_agent:rdata_fifo_src_valid -> nios_i2cclk_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_i2cclk_s1_agent_rdata_fifo_src_data;                                           // nios_i2cclk_s1_agent:rdata_fifo_src_data -> nios_i2cclk_s1_agent_rdata_fifo:in_data
	wire          nios_i2cclk_s1_agent_rdata_fifo_src_ready;                                          // nios_i2cclk_s1_agent_rdata_fifo:in_ready -> nios_i2cclk_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> nios_i2cclk_s1_agent:cp_valid
	wire  [107:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> nios_i2cclk_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                              // nios_i2cclk_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [18:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> nios_i2cclk_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> nios_i2cclk_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> nios_i2cclk_s1_agent:cp_endofpacket
	wire   [31:0] nios_uarttx_s1_agent_m0_readdata;                                                   // nios_uarttx_s1_translator:uav_readdata -> nios_uarttx_s1_agent:m0_readdata
	wire          nios_uarttx_s1_agent_m0_waitrequest;                                                // nios_uarttx_s1_translator:uav_waitrequest -> nios_uarttx_s1_agent:m0_waitrequest
	wire          nios_uarttx_s1_agent_m0_debugaccess;                                                // nios_uarttx_s1_agent:m0_debugaccess -> nios_uarttx_s1_translator:uav_debugaccess
	wire   [27:0] nios_uarttx_s1_agent_m0_address;                                                    // nios_uarttx_s1_agent:m0_address -> nios_uarttx_s1_translator:uav_address
	wire    [3:0] nios_uarttx_s1_agent_m0_byteenable;                                                 // nios_uarttx_s1_agent:m0_byteenable -> nios_uarttx_s1_translator:uav_byteenable
	wire          nios_uarttx_s1_agent_m0_read;                                                       // nios_uarttx_s1_agent:m0_read -> nios_uarttx_s1_translator:uav_read
	wire          nios_uarttx_s1_agent_m0_readdatavalid;                                              // nios_uarttx_s1_translator:uav_readdatavalid -> nios_uarttx_s1_agent:m0_readdatavalid
	wire          nios_uarttx_s1_agent_m0_lock;                                                       // nios_uarttx_s1_agent:m0_lock -> nios_uarttx_s1_translator:uav_lock
	wire   [31:0] nios_uarttx_s1_agent_m0_writedata;                                                  // nios_uarttx_s1_agent:m0_writedata -> nios_uarttx_s1_translator:uav_writedata
	wire          nios_uarttx_s1_agent_m0_write;                                                      // nios_uarttx_s1_agent:m0_write -> nios_uarttx_s1_translator:uav_write
	wire    [2:0] nios_uarttx_s1_agent_m0_burstcount;                                                 // nios_uarttx_s1_agent:m0_burstcount -> nios_uarttx_s1_translator:uav_burstcount
	wire          nios_uarttx_s1_agent_rf_source_valid;                                               // nios_uarttx_s1_agent:rf_source_valid -> nios_uarttx_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_uarttx_s1_agent_rf_source_data;                                                // nios_uarttx_s1_agent:rf_source_data -> nios_uarttx_s1_agent_rsp_fifo:in_data
	wire          nios_uarttx_s1_agent_rf_source_ready;                                               // nios_uarttx_s1_agent_rsp_fifo:in_ready -> nios_uarttx_s1_agent:rf_source_ready
	wire          nios_uarttx_s1_agent_rf_source_startofpacket;                                       // nios_uarttx_s1_agent:rf_source_startofpacket -> nios_uarttx_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_uarttx_s1_agent_rf_source_endofpacket;                                         // nios_uarttx_s1_agent:rf_source_endofpacket -> nios_uarttx_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_uarttx_s1_agent_rsp_fifo_out_valid;                                            // nios_uarttx_s1_agent_rsp_fifo:out_valid -> nios_uarttx_s1_agent:rf_sink_valid
	wire  [108:0] nios_uarttx_s1_agent_rsp_fifo_out_data;                                             // nios_uarttx_s1_agent_rsp_fifo:out_data -> nios_uarttx_s1_agent:rf_sink_data
	wire          nios_uarttx_s1_agent_rsp_fifo_out_ready;                                            // nios_uarttx_s1_agent:rf_sink_ready -> nios_uarttx_s1_agent_rsp_fifo:out_ready
	wire          nios_uarttx_s1_agent_rsp_fifo_out_startofpacket;                                    // nios_uarttx_s1_agent_rsp_fifo:out_startofpacket -> nios_uarttx_s1_agent:rf_sink_startofpacket
	wire          nios_uarttx_s1_agent_rsp_fifo_out_endofpacket;                                      // nios_uarttx_s1_agent_rsp_fifo:out_endofpacket -> nios_uarttx_s1_agent:rf_sink_endofpacket
	wire          nios_uarttx_s1_agent_rdata_fifo_src_valid;                                          // nios_uarttx_s1_agent:rdata_fifo_src_valid -> nios_uarttx_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_uarttx_s1_agent_rdata_fifo_src_data;                                           // nios_uarttx_s1_agent:rdata_fifo_src_data -> nios_uarttx_s1_agent_rdata_fifo:in_data
	wire          nios_uarttx_s1_agent_rdata_fifo_src_ready;                                          // nios_uarttx_s1_agent_rdata_fifo:in_ready -> nios_uarttx_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> nios_uarttx_s1_agent:cp_valid
	wire  [107:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> nios_uarttx_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                              // nios_uarttx_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [18:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> nios_uarttx_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> nios_uarttx_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> nios_uarttx_s1_agent:cp_endofpacket
	wire   [31:0] nios_i2cdat_s1_agent_m0_readdata;                                                   // nios_i2cdat_s1_translator:uav_readdata -> nios_i2cdat_s1_agent:m0_readdata
	wire          nios_i2cdat_s1_agent_m0_waitrequest;                                                // nios_i2cdat_s1_translator:uav_waitrequest -> nios_i2cdat_s1_agent:m0_waitrequest
	wire          nios_i2cdat_s1_agent_m0_debugaccess;                                                // nios_i2cdat_s1_agent:m0_debugaccess -> nios_i2cdat_s1_translator:uav_debugaccess
	wire   [27:0] nios_i2cdat_s1_agent_m0_address;                                                    // nios_i2cdat_s1_agent:m0_address -> nios_i2cdat_s1_translator:uav_address
	wire    [3:0] nios_i2cdat_s1_agent_m0_byteenable;                                                 // nios_i2cdat_s1_agent:m0_byteenable -> nios_i2cdat_s1_translator:uav_byteenable
	wire          nios_i2cdat_s1_agent_m0_read;                                                       // nios_i2cdat_s1_agent:m0_read -> nios_i2cdat_s1_translator:uav_read
	wire          nios_i2cdat_s1_agent_m0_readdatavalid;                                              // nios_i2cdat_s1_translator:uav_readdatavalid -> nios_i2cdat_s1_agent:m0_readdatavalid
	wire          nios_i2cdat_s1_agent_m0_lock;                                                       // nios_i2cdat_s1_agent:m0_lock -> nios_i2cdat_s1_translator:uav_lock
	wire   [31:0] nios_i2cdat_s1_agent_m0_writedata;                                                  // nios_i2cdat_s1_agent:m0_writedata -> nios_i2cdat_s1_translator:uav_writedata
	wire          nios_i2cdat_s1_agent_m0_write;                                                      // nios_i2cdat_s1_agent:m0_write -> nios_i2cdat_s1_translator:uav_write
	wire    [2:0] nios_i2cdat_s1_agent_m0_burstcount;                                                 // nios_i2cdat_s1_agent:m0_burstcount -> nios_i2cdat_s1_translator:uav_burstcount
	wire          nios_i2cdat_s1_agent_rf_source_valid;                                               // nios_i2cdat_s1_agent:rf_source_valid -> nios_i2cdat_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_i2cdat_s1_agent_rf_source_data;                                                // nios_i2cdat_s1_agent:rf_source_data -> nios_i2cdat_s1_agent_rsp_fifo:in_data
	wire          nios_i2cdat_s1_agent_rf_source_ready;                                               // nios_i2cdat_s1_agent_rsp_fifo:in_ready -> nios_i2cdat_s1_agent:rf_source_ready
	wire          nios_i2cdat_s1_agent_rf_source_startofpacket;                                       // nios_i2cdat_s1_agent:rf_source_startofpacket -> nios_i2cdat_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_i2cdat_s1_agent_rf_source_endofpacket;                                         // nios_i2cdat_s1_agent:rf_source_endofpacket -> nios_i2cdat_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_i2cdat_s1_agent_rsp_fifo_out_valid;                                            // nios_i2cdat_s1_agent_rsp_fifo:out_valid -> nios_i2cdat_s1_agent:rf_sink_valid
	wire  [108:0] nios_i2cdat_s1_agent_rsp_fifo_out_data;                                             // nios_i2cdat_s1_agent_rsp_fifo:out_data -> nios_i2cdat_s1_agent:rf_sink_data
	wire          nios_i2cdat_s1_agent_rsp_fifo_out_ready;                                            // nios_i2cdat_s1_agent:rf_sink_ready -> nios_i2cdat_s1_agent_rsp_fifo:out_ready
	wire          nios_i2cdat_s1_agent_rsp_fifo_out_startofpacket;                                    // nios_i2cdat_s1_agent_rsp_fifo:out_startofpacket -> nios_i2cdat_s1_agent:rf_sink_startofpacket
	wire          nios_i2cdat_s1_agent_rsp_fifo_out_endofpacket;                                      // nios_i2cdat_s1_agent_rsp_fifo:out_endofpacket -> nios_i2cdat_s1_agent:rf_sink_endofpacket
	wire          nios_i2cdat_s1_agent_rdata_fifo_src_valid;                                          // nios_i2cdat_s1_agent:rdata_fifo_src_valid -> nios_i2cdat_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_i2cdat_s1_agent_rdata_fifo_src_data;                                           // nios_i2cdat_s1_agent:rdata_fifo_src_data -> nios_i2cdat_s1_agent_rdata_fifo:in_data
	wire          nios_i2cdat_s1_agent_rdata_fifo_src_ready;                                          // nios_i2cdat_s1_agent_rdata_fifo:in_ready -> nios_i2cdat_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> nios_i2cdat_s1_agent:cp_valid
	wire  [107:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> nios_i2cdat_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                              // nios_i2cdat_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [18:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> nios_i2cdat_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> nios_i2cdat_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> nios_i2cdat_s1_agent:cp_endofpacket
	wire   [31:0] nios_i2crw_s1_agent_m0_readdata;                                                    // nios_i2crw_s1_translator:uav_readdata -> nios_i2crw_s1_agent:m0_readdata
	wire          nios_i2crw_s1_agent_m0_waitrequest;                                                 // nios_i2crw_s1_translator:uav_waitrequest -> nios_i2crw_s1_agent:m0_waitrequest
	wire          nios_i2crw_s1_agent_m0_debugaccess;                                                 // nios_i2crw_s1_agent:m0_debugaccess -> nios_i2crw_s1_translator:uav_debugaccess
	wire   [27:0] nios_i2crw_s1_agent_m0_address;                                                     // nios_i2crw_s1_agent:m0_address -> nios_i2crw_s1_translator:uav_address
	wire    [3:0] nios_i2crw_s1_agent_m0_byteenable;                                                  // nios_i2crw_s1_agent:m0_byteenable -> nios_i2crw_s1_translator:uav_byteenable
	wire          nios_i2crw_s1_agent_m0_read;                                                        // nios_i2crw_s1_agent:m0_read -> nios_i2crw_s1_translator:uav_read
	wire          nios_i2crw_s1_agent_m0_readdatavalid;                                               // nios_i2crw_s1_translator:uav_readdatavalid -> nios_i2crw_s1_agent:m0_readdatavalid
	wire          nios_i2crw_s1_agent_m0_lock;                                                        // nios_i2crw_s1_agent:m0_lock -> nios_i2crw_s1_translator:uav_lock
	wire   [31:0] nios_i2crw_s1_agent_m0_writedata;                                                   // nios_i2crw_s1_agent:m0_writedata -> nios_i2crw_s1_translator:uav_writedata
	wire          nios_i2crw_s1_agent_m0_write;                                                       // nios_i2crw_s1_agent:m0_write -> nios_i2crw_s1_translator:uav_write
	wire    [2:0] nios_i2crw_s1_agent_m0_burstcount;                                                  // nios_i2crw_s1_agent:m0_burstcount -> nios_i2crw_s1_translator:uav_burstcount
	wire          nios_i2crw_s1_agent_rf_source_valid;                                                // nios_i2crw_s1_agent:rf_source_valid -> nios_i2crw_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_i2crw_s1_agent_rf_source_data;                                                 // nios_i2crw_s1_agent:rf_source_data -> nios_i2crw_s1_agent_rsp_fifo:in_data
	wire          nios_i2crw_s1_agent_rf_source_ready;                                                // nios_i2crw_s1_agent_rsp_fifo:in_ready -> nios_i2crw_s1_agent:rf_source_ready
	wire          nios_i2crw_s1_agent_rf_source_startofpacket;                                        // nios_i2crw_s1_agent:rf_source_startofpacket -> nios_i2crw_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_i2crw_s1_agent_rf_source_endofpacket;                                          // nios_i2crw_s1_agent:rf_source_endofpacket -> nios_i2crw_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_i2crw_s1_agent_rsp_fifo_out_valid;                                             // nios_i2crw_s1_agent_rsp_fifo:out_valid -> nios_i2crw_s1_agent:rf_sink_valid
	wire  [108:0] nios_i2crw_s1_agent_rsp_fifo_out_data;                                              // nios_i2crw_s1_agent_rsp_fifo:out_data -> nios_i2crw_s1_agent:rf_sink_data
	wire          nios_i2crw_s1_agent_rsp_fifo_out_ready;                                             // nios_i2crw_s1_agent:rf_sink_ready -> nios_i2crw_s1_agent_rsp_fifo:out_ready
	wire          nios_i2crw_s1_agent_rsp_fifo_out_startofpacket;                                     // nios_i2crw_s1_agent_rsp_fifo:out_startofpacket -> nios_i2crw_s1_agent:rf_sink_startofpacket
	wire          nios_i2crw_s1_agent_rsp_fifo_out_endofpacket;                                       // nios_i2crw_s1_agent_rsp_fifo:out_endofpacket -> nios_i2crw_s1_agent:rf_sink_endofpacket
	wire          nios_i2crw_s1_agent_rdata_fifo_src_valid;                                           // nios_i2crw_s1_agent:rdata_fifo_src_valid -> nios_i2crw_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_i2crw_s1_agent_rdata_fifo_src_data;                                            // nios_i2crw_s1_agent:rdata_fifo_src_data -> nios_i2crw_s1_agent_rdata_fifo:in_data
	wire          nios_i2crw_s1_agent_rdata_fifo_src_ready;                                           // nios_i2crw_s1_agent_rdata_fifo:in_ready -> nios_i2crw_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> nios_i2crw_s1_agent:cp_valid
	wire  [107:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> nios_i2crw_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                              // nios_i2crw_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [18:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> nios_i2crw_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> nios_i2crw_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> nios_i2crw_s1_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                       // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                    // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                    // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [27:0] timer_0_s1_agent_m0_address;                                                        // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                     // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                           // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                  // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                           // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                      // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                          // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                     // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                   // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] timer_0_s1_agent_rf_source_data;                                                    // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                   // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                           // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                             // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [108:0] timer_0_s1_agent_rsp_fifo_out_data;                                                 // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                              // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                               // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent_rdata_fifo:in_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                              // timer_0_s1_agent_rdata_fifo:in_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> timer_0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                              // timer_0_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [18:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire   [31:0] nios_7seg_s1_agent_m0_readdata;                                                     // nios_7seg_s1_translator:uav_readdata -> nios_7seg_s1_agent:m0_readdata
	wire          nios_7seg_s1_agent_m0_waitrequest;                                                  // nios_7seg_s1_translator:uav_waitrequest -> nios_7seg_s1_agent:m0_waitrequest
	wire          nios_7seg_s1_agent_m0_debugaccess;                                                  // nios_7seg_s1_agent:m0_debugaccess -> nios_7seg_s1_translator:uav_debugaccess
	wire   [27:0] nios_7seg_s1_agent_m0_address;                                                      // nios_7seg_s1_agent:m0_address -> nios_7seg_s1_translator:uav_address
	wire    [3:0] nios_7seg_s1_agent_m0_byteenable;                                                   // nios_7seg_s1_agent:m0_byteenable -> nios_7seg_s1_translator:uav_byteenable
	wire          nios_7seg_s1_agent_m0_read;                                                         // nios_7seg_s1_agent:m0_read -> nios_7seg_s1_translator:uav_read
	wire          nios_7seg_s1_agent_m0_readdatavalid;                                                // nios_7seg_s1_translator:uav_readdatavalid -> nios_7seg_s1_agent:m0_readdatavalid
	wire          nios_7seg_s1_agent_m0_lock;                                                         // nios_7seg_s1_agent:m0_lock -> nios_7seg_s1_translator:uav_lock
	wire   [31:0] nios_7seg_s1_agent_m0_writedata;                                                    // nios_7seg_s1_agent:m0_writedata -> nios_7seg_s1_translator:uav_writedata
	wire          nios_7seg_s1_agent_m0_write;                                                        // nios_7seg_s1_agent:m0_write -> nios_7seg_s1_translator:uav_write
	wire    [2:0] nios_7seg_s1_agent_m0_burstcount;                                                   // nios_7seg_s1_agent:m0_burstcount -> nios_7seg_s1_translator:uav_burstcount
	wire          nios_7seg_s1_agent_rf_source_valid;                                                 // nios_7seg_s1_agent:rf_source_valid -> nios_7seg_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_7seg_s1_agent_rf_source_data;                                                  // nios_7seg_s1_agent:rf_source_data -> nios_7seg_s1_agent_rsp_fifo:in_data
	wire          nios_7seg_s1_agent_rf_source_ready;                                                 // nios_7seg_s1_agent_rsp_fifo:in_ready -> nios_7seg_s1_agent:rf_source_ready
	wire          nios_7seg_s1_agent_rf_source_startofpacket;                                         // nios_7seg_s1_agent:rf_source_startofpacket -> nios_7seg_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_7seg_s1_agent_rf_source_endofpacket;                                           // nios_7seg_s1_agent:rf_source_endofpacket -> nios_7seg_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_7seg_s1_agent_rsp_fifo_out_valid;                                              // nios_7seg_s1_agent_rsp_fifo:out_valid -> nios_7seg_s1_agent:rf_sink_valid
	wire  [108:0] nios_7seg_s1_agent_rsp_fifo_out_data;                                               // nios_7seg_s1_agent_rsp_fifo:out_data -> nios_7seg_s1_agent:rf_sink_data
	wire          nios_7seg_s1_agent_rsp_fifo_out_ready;                                              // nios_7seg_s1_agent:rf_sink_ready -> nios_7seg_s1_agent_rsp_fifo:out_ready
	wire          nios_7seg_s1_agent_rsp_fifo_out_startofpacket;                                      // nios_7seg_s1_agent_rsp_fifo:out_startofpacket -> nios_7seg_s1_agent:rf_sink_startofpacket
	wire          nios_7seg_s1_agent_rsp_fifo_out_endofpacket;                                        // nios_7seg_s1_agent_rsp_fifo:out_endofpacket -> nios_7seg_s1_agent:rf_sink_endofpacket
	wire          nios_7seg_s1_agent_rdata_fifo_src_valid;                                            // nios_7seg_s1_agent:rdata_fifo_src_valid -> nios_7seg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_7seg_s1_agent_rdata_fifo_src_data;                                             // nios_7seg_s1_agent:rdata_fifo_src_data -> nios_7seg_s1_agent_rdata_fifo:in_data
	wire          nios_7seg_s1_agent_rdata_fifo_src_ready;                                            // nios_7seg_s1_agent_rdata_fifo:in_ready -> nios_7seg_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> nios_7seg_s1_agent:cp_valid
	wire  [107:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> nios_7seg_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                              // nios_7seg_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [18:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> nios_7seg_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> nios_7seg_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> nios_7seg_s1_agent:cp_endofpacket
	wire   [31:0] nios_header_conn_s1_agent_m0_readdata;                                              // nios_header_conn_s1_translator:uav_readdata -> nios_header_conn_s1_agent:m0_readdata
	wire          nios_header_conn_s1_agent_m0_waitrequest;                                           // nios_header_conn_s1_translator:uav_waitrequest -> nios_header_conn_s1_agent:m0_waitrequest
	wire          nios_header_conn_s1_agent_m0_debugaccess;                                           // nios_header_conn_s1_agent:m0_debugaccess -> nios_header_conn_s1_translator:uav_debugaccess
	wire   [27:0] nios_header_conn_s1_agent_m0_address;                                               // nios_header_conn_s1_agent:m0_address -> nios_header_conn_s1_translator:uav_address
	wire    [3:0] nios_header_conn_s1_agent_m0_byteenable;                                            // nios_header_conn_s1_agent:m0_byteenable -> nios_header_conn_s1_translator:uav_byteenable
	wire          nios_header_conn_s1_agent_m0_read;                                                  // nios_header_conn_s1_agent:m0_read -> nios_header_conn_s1_translator:uav_read
	wire          nios_header_conn_s1_agent_m0_readdatavalid;                                         // nios_header_conn_s1_translator:uav_readdatavalid -> nios_header_conn_s1_agent:m0_readdatavalid
	wire          nios_header_conn_s1_agent_m0_lock;                                                  // nios_header_conn_s1_agent:m0_lock -> nios_header_conn_s1_translator:uav_lock
	wire   [31:0] nios_header_conn_s1_agent_m0_writedata;                                             // nios_header_conn_s1_agent:m0_writedata -> nios_header_conn_s1_translator:uav_writedata
	wire          nios_header_conn_s1_agent_m0_write;                                                 // nios_header_conn_s1_agent:m0_write -> nios_header_conn_s1_translator:uav_write
	wire    [2:0] nios_header_conn_s1_agent_m0_burstcount;                                            // nios_header_conn_s1_agent:m0_burstcount -> nios_header_conn_s1_translator:uav_burstcount
	wire          nios_header_conn_s1_agent_rf_source_valid;                                          // nios_header_conn_s1_agent:rf_source_valid -> nios_header_conn_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_header_conn_s1_agent_rf_source_data;                                           // nios_header_conn_s1_agent:rf_source_data -> nios_header_conn_s1_agent_rsp_fifo:in_data
	wire          nios_header_conn_s1_agent_rf_source_ready;                                          // nios_header_conn_s1_agent_rsp_fifo:in_ready -> nios_header_conn_s1_agent:rf_source_ready
	wire          nios_header_conn_s1_agent_rf_source_startofpacket;                                  // nios_header_conn_s1_agent:rf_source_startofpacket -> nios_header_conn_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_header_conn_s1_agent_rf_source_endofpacket;                                    // nios_header_conn_s1_agent:rf_source_endofpacket -> nios_header_conn_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_header_conn_s1_agent_rsp_fifo_out_valid;                                       // nios_header_conn_s1_agent_rsp_fifo:out_valid -> nios_header_conn_s1_agent:rf_sink_valid
	wire  [108:0] nios_header_conn_s1_agent_rsp_fifo_out_data;                                        // nios_header_conn_s1_agent_rsp_fifo:out_data -> nios_header_conn_s1_agent:rf_sink_data
	wire          nios_header_conn_s1_agent_rsp_fifo_out_ready;                                       // nios_header_conn_s1_agent:rf_sink_ready -> nios_header_conn_s1_agent_rsp_fifo:out_ready
	wire          nios_header_conn_s1_agent_rsp_fifo_out_startofpacket;                               // nios_header_conn_s1_agent_rsp_fifo:out_startofpacket -> nios_header_conn_s1_agent:rf_sink_startofpacket
	wire          nios_header_conn_s1_agent_rsp_fifo_out_endofpacket;                                 // nios_header_conn_s1_agent_rsp_fifo:out_endofpacket -> nios_header_conn_s1_agent:rf_sink_endofpacket
	wire          nios_header_conn_s1_agent_rdata_fifo_src_valid;                                     // nios_header_conn_s1_agent:rdata_fifo_src_valid -> nios_header_conn_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_header_conn_s1_agent_rdata_fifo_src_data;                                      // nios_header_conn_s1_agent:rdata_fifo_src_data -> nios_header_conn_s1_agent_rdata_fifo:in_data
	wire          nios_header_conn_s1_agent_rdata_fifo_src_ready;                                     // nios_header_conn_s1_agent_rdata_fifo:in_ready -> nios_header_conn_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> nios_header_conn_s1_agent:cp_valid
	wire  [107:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> nios_header_conn_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                              // nios_header_conn_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [18:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> nios_header_conn_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> nios_header_conn_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> nios_header_conn_s1_agent:cp_endofpacket
	wire   [31:0] uart_0_s1_agent_m0_readdata;                                                        // uart_0_s1_translator:uav_readdata -> uart_0_s1_agent:m0_readdata
	wire          uart_0_s1_agent_m0_waitrequest;                                                     // uart_0_s1_translator:uav_waitrequest -> uart_0_s1_agent:m0_waitrequest
	wire          uart_0_s1_agent_m0_debugaccess;                                                     // uart_0_s1_agent:m0_debugaccess -> uart_0_s1_translator:uav_debugaccess
	wire   [27:0] uart_0_s1_agent_m0_address;                                                         // uart_0_s1_agent:m0_address -> uart_0_s1_translator:uav_address
	wire    [3:0] uart_0_s1_agent_m0_byteenable;                                                      // uart_0_s1_agent:m0_byteenable -> uart_0_s1_translator:uav_byteenable
	wire          uart_0_s1_agent_m0_read;                                                            // uart_0_s1_agent:m0_read -> uart_0_s1_translator:uav_read
	wire          uart_0_s1_agent_m0_readdatavalid;                                                   // uart_0_s1_translator:uav_readdatavalid -> uart_0_s1_agent:m0_readdatavalid
	wire          uart_0_s1_agent_m0_lock;                                                            // uart_0_s1_agent:m0_lock -> uart_0_s1_translator:uav_lock
	wire   [31:0] uart_0_s1_agent_m0_writedata;                                                       // uart_0_s1_agent:m0_writedata -> uart_0_s1_translator:uav_writedata
	wire          uart_0_s1_agent_m0_write;                                                           // uart_0_s1_agent:m0_write -> uart_0_s1_translator:uav_write
	wire    [2:0] uart_0_s1_agent_m0_burstcount;                                                      // uart_0_s1_agent:m0_burstcount -> uart_0_s1_translator:uav_burstcount
	wire          uart_0_s1_agent_rf_source_valid;                                                    // uart_0_s1_agent:rf_source_valid -> uart_0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] uart_0_s1_agent_rf_source_data;                                                     // uart_0_s1_agent:rf_source_data -> uart_0_s1_agent_rsp_fifo:in_data
	wire          uart_0_s1_agent_rf_source_ready;                                                    // uart_0_s1_agent_rsp_fifo:in_ready -> uart_0_s1_agent:rf_source_ready
	wire          uart_0_s1_agent_rf_source_startofpacket;                                            // uart_0_s1_agent:rf_source_startofpacket -> uart_0_s1_agent_rsp_fifo:in_startofpacket
	wire          uart_0_s1_agent_rf_source_endofpacket;                                              // uart_0_s1_agent:rf_source_endofpacket -> uart_0_s1_agent_rsp_fifo:in_endofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_valid;                                                 // uart_0_s1_agent_rsp_fifo:out_valid -> uart_0_s1_agent:rf_sink_valid
	wire  [108:0] uart_0_s1_agent_rsp_fifo_out_data;                                                  // uart_0_s1_agent_rsp_fifo:out_data -> uart_0_s1_agent:rf_sink_data
	wire          uart_0_s1_agent_rsp_fifo_out_ready;                                                 // uart_0_s1_agent:rf_sink_ready -> uart_0_s1_agent_rsp_fifo:out_ready
	wire          uart_0_s1_agent_rsp_fifo_out_startofpacket;                                         // uart_0_s1_agent_rsp_fifo:out_startofpacket -> uart_0_s1_agent:rf_sink_startofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_endofpacket;                                           // uart_0_s1_agent_rsp_fifo:out_endofpacket -> uart_0_s1_agent:rf_sink_endofpacket
	wire          uart_0_s1_agent_rdata_fifo_src_valid;                                               // uart_0_s1_agent:rdata_fifo_src_valid -> uart_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] uart_0_s1_agent_rdata_fifo_src_data;                                                // uart_0_s1_agent:rdata_fifo_src_data -> uart_0_s1_agent_rdata_fifo:in_data
	wire          uart_0_s1_agent_rdata_fifo_src_ready;                                               // uart_0_s1_agent_rdata_fifo:in_ready -> uart_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> uart_0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> uart_0_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                              // uart_0_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [18:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> uart_0_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> uart_0_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> uart_0_s1_agent:cp_endofpacket
	wire   [31:0] nios_oscdivisor_s1_agent_m0_readdata;                                               // nios_oscdivisor_s1_translator:uav_readdata -> nios_oscdivisor_s1_agent:m0_readdata
	wire          nios_oscdivisor_s1_agent_m0_waitrequest;                                            // nios_oscdivisor_s1_translator:uav_waitrequest -> nios_oscdivisor_s1_agent:m0_waitrequest
	wire          nios_oscdivisor_s1_agent_m0_debugaccess;                                            // nios_oscdivisor_s1_agent:m0_debugaccess -> nios_oscdivisor_s1_translator:uav_debugaccess
	wire   [27:0] nios_oscdivisor_s1_agent_m0_address;                                                // nios_oscdivisor_s1_agent:m0_address -> nios_oscdivisor_s1_translator:uav_address
	wire    [3:0] nios_oscdivisor_s1_agent_m0_byteenable;                                             // nios_oscdivisor_s1_agent:m0_byteenable -> nios_oscdivisor_s1_translator:uav_byteenable
	wire          nios_oscdivisor_s1_agent_m0_read;                                                   // nios_oscdivisor_s1_agent:m0_read -> nios_oscdivisor_s1_translator:uav_read
	wire          nios_oscdivisor_s1_agent_m0_readdatavalid;                                          // nios_oscdivisor_s1_translator:uav_readdatavalid -> nios_oscdivisor_s1_agent:m0_readdatavalid
	wire          nios_oscdivisor_s1_agent_m0_lock;                                                   // nios_oscdivisor_s1_agent:m0_lock -> nios_oscdivisor_s1_translator:uav_lock
	wire   [31:0] nios_oscdivisor_s1_agent_m0_writedata;                                              // nios_oscdivisor_s1_agent:m0_writedata -> nios_oscdivisor_s1_translator:uav_writedata
	wire          nios_oscdivisor_s1_agent_m0_write;                                                  // nios_oscdivisor_s1_agent:m0_write -> nios_oscdivisor_s1_translator:uav_write
	wire    [2:0] nios_oscdivisor_s1_agent_m0_burstcount;                                             // nios_oscdivisor_s1_agent:m0_burstcount -> nios_oscdivisor_s1_translator:uav_burstcount
	wire          nios_oscdivisor_s1_agent_rf_source_valid;                                           // nios_oscdivisor_s1_agent:rf_source_valid -> nios_oscdivisor_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios_oscdivisor_s1_agent_rf_source_data;                                            // nios_oscdivisor_s1_agent:rf_source_data -> nios_oscdivisor_s1_agent_rsp_fifo:in_data
	wire          nios_oscdivisor_s1_agent_rf_source_ready;                                           // nios_oscdivisor_s1_agent_rsp_fifo:in_ready -> nios_oscdivisor_s1_agent:rf_source_ready
	wire          nios_oscdivisor_s1_agent_rf_source_startofpacket;                                   // nios_oscdivisor_s1_agent:rf_source_startofpacket -> nios_oscdivisor_s1_agent_rsp_fifo:in_startofpacket
	wire          nios_oscdivisor_s1_agent_rf_source_endofpacket;                                     // nios_oscdivisor_s1_agent:rf_source_endofpacket -> nios_oscdivisor_s1_agent_rsp_fifo:in_endofpacket
	wire          nios_oscdivisor_s1_agent_rsp_fifo_out_valid;                                        // nios_oscdivisor_s1_agent_rsp_fifo:out_valid -> nios_oscdivisor_s1_agent:rf_sink_valid
	wire  [108:0] nios_oscdivisor_s1_agent_rsp_fifo_out_data;                                         // nios_oscdivisor_s1_agent_rsp_fifo:out_data -> nios_oscdivisor_s1_agent:rf_sink_data
	wire          nios_oscdivisor_s1_agent_rsp_fifo_out_ready;                                        // nios_oscdivisor_s1_agent:rf_sink_ready -> nios_oscdivisor_s1_agent_rsp_fifo:out_ready
	wire          nios_oscdivisor_s1_agent_rsp_fifo_out_startofpacket;                                // nios_oscdivisor_s1_agent_rsp_fifo:out_startofpacket -> nios_oscdivisor_s1_agent:rf_sink_startofpacket
	wire          nios_oscdivisor_s1_agent_rsp_fifo_out_endofpacket;                                  // nios_oscdivisor_s1_agent_rsp_fifo:out_endofpacket -> nios_oscdivisor_s1_agent:rf_sink_endofpacket
	wire          nios_oscdivisor_s1_agent_rdata_fifo_src_valid;                                      // nios_oscdivisor_s1_agent:rdata_fifo_src_valid -> nios_oscdivisor_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios_oscdivisor_s1_agent_rdata_fifo_src_data;                                       // nios_oscdivisor_s1_agent:rdata_fifo_src_data -> nios_oscdivisor_s1_agent_rdata_fifo:in_data
	wire          nios_oscdivisor_s1_agent_rdata_fifo_src_ready;                                      // nios_oscdivisor_s1_agent_rdata_fifo:in_ready -> nios_oscdivisor_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> nios_oscdivisor_s1_agent:cp_valid
	wire  [107:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> nios_oscdivisor_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                              // nios_oscdivisor_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [18:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> nios_oscdivisor_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> nios_oscdivisor_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> nios_oscdivisor_s1_agent:cp_endofpacket
	wire   [31:0] spi_0_spi_control_port_agent_m0_readdata;                                           // spi_0_spi_control_port_translator:uav_readdata -> spi_0_spi_control_port_agent:m0_readdata
	wire          spi_0_spi_control_port_agent_m0_waitrequest;                                        // spi_0_spi_control_port_translator:uav_waitrequest -> spi_0_spi_control_port_agent:m0_waitrequest
	wire          spi_0_spi_control_port_agent_m0_debugaccess;                                        // spi_0_spi_control_port_agent:m0_debugaccess -> spi_0_spi_control_port_translator:uav_debugaccess
	wire   [27:0] spi_0_spi_control_port_agent_m0_address;                                            // spi_0_spi_control_port_agent:m0_address -> spi_0_spi_control_port_translator:uav_address
	wire    [3:0] spi_0_spi_control_port_agent_m0_byteenable;                                         // spi_0_spi_control_port_agent:m0_byteenable -> spi_0_spi_control_port_translator:uav_byteenable
	wire          spi_0_spi_control_port_agent_m0_read;                                               // spi_0_spi_control_port_agent:m0_read -> spi_0_spi_control_port_translator:uav_read
	wire          spi_0_spi_control_port_agent_m0_readdatavalid;                                      // spi_0_spi_control_port_translator:uav_readdatavalid -> spi_0_spi_control_port_agent:m0_readdatavalid
	wire          spi_0_spi_control_port_agent_m0_lock;                                               // spi_0_spi_control_port_agent:m0_lock -> spi_0_spi_control_port_translator:uav_lock
	wire   [31:0] spi_0_spi_control_port_agent_m0_writedata;                                          // spi_0_spi_control_port_agent:m0_writedata -> spi_0_spi_control_port_translator:uav_writedata
	wire          spi_0_spi_control_port_agent_m0_write;                                              // spi_0_spi_control_port_agent:m0_write -> spi_0_spi_control_port_translator:uav_write
	wire    [2:0] spi_0_spi_control_port_agent_m0_burstcount;                                         // spi_0_spi_control_port_agent:m0_burstcount -> spi_0_spi_control_port_translator:uav_burstcount
	wire          spi_0_spi_control_port_agent_rf_source_valid;                                       // spi_0_spi_control_port_agent:rf_source_valid -> spi_0_spi_control_port_agent_rsp_fifo:in_valid
	wire  [108:0] spi_0_spi_control_port_agent_rf_source_data;                                        // spi_0_spi_control_port_agent:rf_source_data -> spi_0_spi_control_port_agent_rsp_fifo:in_data
	wire          spi_0_spi_control_port_agent_rf_source_ready;                                       // spi_0_spi_control_port_agent_rsp_fifo:in_ready -> spi_0_spi_control_port_agent:rf_source_ready
	wire          spi_0_spi_control_port_agent_rf_source_startofpacket;                               // spi_0_spi_control_port_agent:rf_source_startofpacket -> spi_0_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          spi_0_spi_control_port_agent_rf_source_endofpacket;                                 // spi_0_spi_control_port_agent:rf_source_endofpacket -> spi_0_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          spi_0_spi_control_port_agent_rsp_fifo_out_valid;                                    // spi_0_spi_control_port_agent_rsp_fifo:out_valid -> spi_0_spi_control_port_agent:rf_sink_valid
	wire  [108:0] spi_0_spi_control_port_agent_rsp_fifo_out_data;                                     // spi_0_spi_control_port_agent_rsp_fifo:out_data -> spi_0_spi_control_port_agent:rf_sink_data
	wire          spi_0_spi_control_port_agent_rsp_fifo_out_ready;                                    // spi_0_spi_control_port_agent:rf_sink_ready -> spi_0_spi_control_port_agent_rsp_fifo:out_ready
	wire          spi_0_spi_control_port_agent_rsp_fifo_out_startofpacket;                            // spi_0_spi_control_port_agent_rsp_fifo:out_startofpacket -> spi_0_spi_control_port_agent:rf_sink_startofpacket
	wire          spi_0_spi_control_port_agent_rsp_fifo_out_endofpacket;                              // spi_0_spi_control_port_agent_rsp_fifo:out_endofpacket -> spi_0_spi_control_port_agent:rf_sink_endofpacket
	wire          spi_0_spi_control_port_agent_rdata_fifo_src_valid;                                  // spi_0_spi_control_port_agent:rdata_fifo_src_valid -> spi_0_spi_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] spi_0_spi_control_port_agent_rdata_fifo_src_data;                                   // spi_0_spi_control_port_agent:rdata_fifo_src_data -> spi_0_spi_control_port_agent_rdata_fifo:in_data
	wire          spi_0_spi_control_port_agent_rdata_fifo_src_ready;                                  // spi_0_spi_control_port_agent_rdata_fifo:in_ready -> spi_0_spi_control_port_agent:rdata_fifo_src_ready
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> spi_0_spi_control_port_agent:cp_valid
	wire  [107:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> spi_0_spi_control_port_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                              // spi_0_spi_control_port_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [18:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> spi_0_spi_control_port_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> spi_0_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> spi_0_spi_control_port_agent:cp_endofpacket
	wire          nios2_qsys_0_data_master_agent_cp_valid;                                            // nios2_qsys_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [107:0] nios2_qsys_0_data_master_agent_cp_data;                                             // nios2_qsys_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_qsys_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_qsys_0_data_master_agent:cp_ready
	wire          nios2_qsys_0_data_master_agent_cp_startofpacket;                                    // nios2_qsys_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_qsys_0_data_master_agent_cp_endofpacket;                                      // nios2_qsys_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [107:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [18:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_valid;                                     // nios2_qsys_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [107:0] nios2_qsys_0_instruction_master_agent_cp_data;                                      // nios2_qsys_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_qsys_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_qsys_0_instruction_master_agent:cp_ready
	wire          nios2_qsys_0_instruction_master_agent_cp_startofpacket;                             // nios2_qsys_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_endofpacket;                               // nios2_qsys_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [107:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [18:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [107:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [107:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire   [18:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                          // sysid_qsys_0_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [107:0] sysid_qsys_0_control_slave_agent_rp_data;                                           // sysid_qsys_0_control_slave_agent:rp_data -> router_003:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                          // router_003:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [107:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [18:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          i2c_0_csr_agent_rp_valid;                                                           // i2c_0_csr_agent:rp_valid -> router_004:sink_valid
	wire  [107:0] i2c_0_csr_agent_rp_data;                                                            // i2c_0_csr_agent:rp_data -> router_004:sink_data
	wire          i2c_0_csr_agent_rp_ready;                                                           // router_004:sink_ready -> i2c_0_csr_agent:rp_ready
	wire          i2c_0_csr_agent_rp_startofpacket;                                                   // i2c_0_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          i2c_0_csr_agent_rp_endofpacket;                                                     // i2c_0_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [18:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_valid;                                      // nios2_qsys_0_jtag_debug_module_agent:rp_valid -> router_005:sink_valid
	wire  [107:0] nios2_qsys_0_jtag_debug_module_agent_rp_data;                                       // nios2_qsys_0_jtag_debug_module_agent:rp_data -> router_005:sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_ready;                                      // router_005:sink_ready -> nios2_qsys_0_jtag_debug_module_agent:rp_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket;                              // nios2_qsys_0_jtag_debug_module_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket;                                // nios2_qsys_0_jtag_debug_module_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [107:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [18:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sdram_controller_0_s1_agent_rp_valid;                                               // sdram_controller_0_s1_agent:rp_valid -> router_006:sink_valid
	wire   [89:0] sdram_controller_0_s1_agent_rp_data;                                                // sdram_controller_0_s1_agent:rp_data -> router_006:sink_data
	wire          sdram_controller_0_s1_agent_rp_ready;                                               // router_006:sink_ready -> sdram_controller_0_s1_agent:rp_ready
	wire          sdram_controller_0_s1_agent_rp_startofpacket;                                       // sdram_controller_0_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          sdram_controller_0_s1_agent_rp_endofpacket;                                         // sdram_controller_0_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          nios_leds_s1_agent_rp_valid;                                                        // nios_leds_s1_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] nios_leds_s1_agent_rp_data;                                                         // nios_leds_s1_agent:rp_data -> router_007:sink_data
	wire          nios_leds_s1_agent_rp_ready;                                                        // router_007:sink_ready -> nios_leds_s1_agent:rp_ready
	wire          nios_leds_s1_agent_rp_startofpacket;                                                // nios_leds_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          nios_leds_s1_agent_rp_endofpacket;                                                  // nios_leds_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [107:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [18:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          nios_switches_s1_agent_rp_valid;                                                    // nios_switches_s1_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] nios_switches_s1_agent_rp_data;                                                     // nios_switches_s1_agent:rp_data -> router_008:sink_data
	wire          nios_switches_s1_agent_rp_ready;                                                    // router_008:sink_ready -> nios_switches_s1_agent:rp_ready
	wire          nios_switches_s1_agent_rp_startofpacket;                                            // nios_switches_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          nios_switches_s1_agent_rp_endofpacket;                                              // nios_switches_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [107:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [18:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          nios_buttons_s1_agent_rp_valid;                                                     // nios_buttons_s1_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] nios_buttons_s1_agent_rp_data;                                                      // nios_buttons_s1_agent:rp_data -> router_009:sink_data
	wire          nios_buttons_s1_agent_rp_ready;                                                     // router_009:sink_ready -> nios_buttons_s1_agent:rp_ready
	wire          nios_buttons_s1_agent_rp_startofpacket;                                             // nios_buttons_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          nios_buttons_s1_agent_rp_endofpacket;                                               // nios_buttons_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [107:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [18:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          nios_uartrx_s1_agent_rp_valid;                                                      // nios_uartrx_s1_agent:rp_valid -> router_010:sink_valid
	wire  [107:0] nios_uartrx_s1_agent_rp_data;                                                       // nios_uartrx_s1_agent:rp_data -> router_010:sink_data
	wire          nios_uartrx_s1_agent_rp_ready;                                                      // router_010:sink_ready -> nios_uartrx_s1_agent:rp_ready
	wire          nios_uartrx_s1_agent_rp_startofpacket;                                              // nios_uartrx_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          nios_uartrx_s1_agent_rp_endofpacket;                                                // nios_uartrx_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [107:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [18:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          nios_i2cclk_s1_agent_rp_valid;                                                      // nios_i2cclk_s1_agent:rp_valid -> router_011:sink_valid
	wire  [107:0] nios_i2cclk_s1_agent_rp_data;                                                       // nios_i2cclk_s1_agent:rp_data -> router_011:sink_data
	wire          nios_i2cclk_s1_agent_rp_ready;                                                      // router_011:sink_ready -> nios_i2cclk_s1_agent:rp_ready
	wire          nios_i2cclk_s1_agent_rp_startofpacket;                                              // nios_i2cclk_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          nios_i2cclk_s1_agent_rp_endofpacket;                                                // nios_i2cclk_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [107:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [18:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          nios_uarttx_s1_agent_rp_valid;                                                      // nios_uarttx_s1_agent:rp_valid -> router_012:sink_valid
	wire  [107:0] nios_uarttx_s1_agent_rp_data;                                                       // nios_uarttx_s1_agent:rp_data -> router_012:sink_data
	wire          nios_uarttx_s1_agent_rp_ready;                                                      // router_012:sink_ready -> nios_uarttx_s1_agent:rp_ready
	wire          nios_uarttx_s1_agent_rp_startofpacket;                                              // nios_uarttx_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          nios_uarttx_s1_agent_rp_endofpacket;                                                // nios_uarttx_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [107:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [18:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          nios_i2cdat_s1_agent_rp_valid;                                                      // nios_i2cdat_s1_agent:rp_valid -> router_013:sink_valid
	wire  [107:0] nios_i2cdat_s1_agent_rp_data;                                                       // nios_i2cdat_s1_agent:rp_data -> router_013:sink_data
	wire          nios_i2cdat_s1_agent_rp_ready;                                                      // router_013:sink_ready -> nios_i2cdat_s1_agent:rp_ready
	wire          nios_i2cdat_s1_agent_rp_startofpacket;                                              // nios_i2cdat_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          nios_i2cdat_s1_agent_rp_endofpacket;                                                // nios_i2cdat_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [107:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [18:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          nios_i2crw_s1_agent_rp_valid;                                                       // nios_i2crw_s1_agent:rp_valid -> router_014:sink_valid
	wire  [107:0] nios_i2crw_s1_agent_rp_data;                                                        // nios_i2crw_s1_agent:rp_data -> router_014:sink_data
	wire          nios_i2crw_s1_agent_rp_ready;                                                       // router_014:sink_ready -> nios_i2crw_s1_agent:rp_ready
	wire          nios_i2crw_s1_agent_rp_startofpacket;                                               // nios_i2crw_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          nios_i2crw_s1_agent_rp_endofpacket;                                                 // nios_i2crw_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [107:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [18:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                          // timer_0_s1_agent:rp_valid -> router_015:sink_valid
	wire  [107:0] timer_0_s1_agent_rp_data;                                                           // timer_0_s1_agent:rp_data -> router_015:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                          // router_015:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                  // timer_0_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                    // timer_0_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [107:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [18:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          nios_7seg_s1_agent_rp_valid;                                                        // nios_7seg_s1_agent:rp_valid -> router_016:sink_valid
	wire  [107:0] nios_7seg_s1_agent_rp_data;                                                         // nios_7seg_s1_agent:rp_data -> router_016:sink_data
	wire          nios_7seg_s1_agent_rp_ready;                                                        // router_016:sink_ready -> nios_7seg_s1_agent:rp_ready
	wire          nios_7seg_s1_agent_rp_startofpacket;                                                // nios_7seg_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          nios_7seg_s1_agent_rp_endofpacket;                                                  // nios_7seg_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [107:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [18:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          nios_header_conn_s1_agent_rp_valid;                                                 // nios_header_conn_s1_agent:rp_valid -> router_017:sink_valid
	wire  [107:0] nios_header_conn_s1_agent_rp_data;                                                  // nios_header_conn_s1_agent:rp_data -> router_017:sink_data
	wire          nios_header_conn_s1_agent_rp_ready;                                                 // router_017:sink_ready -> nios_header_conn_s1_agent:rp_ready
	wire          nios_header_conn_s1_agent_rp_startofpacket;                                         // nios_header_conn_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          nios_header_conn_s1_agent_rp_endofpacket;                                           // nios_header_conn_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [107:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [18:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          uart_0_s1_agent_rp_valid;                                                           // uart_0_s1_agent:rp_valid -> router_018:sink_valid
	wire  [107:0] uart_0_s1_agent_rp_data;                                                            // uart_0_s1_agent:rp_data -> router_018:sink_data
	wire          uart_0_s1_agent_rp_ready;                                                           // router_018:sink_ready -> uart_0_s1_agent:rp_ready
	wire          uart_0_s1_agent_rp_startofpacket;                                                   // uart_0_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          uart_0_s1_agent_rp_endofpacket;                                                     // uart_0_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [107:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [18:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          nios_oscdivisor_s1_agent_rp_valid;                                                  // nios_oscdivisor_s1_agent:rp_valid -> router_019:sink_valid
	wire  [107:0] nios_oscdivisor_s1_agent_rp_data;                                                   // nios_oscdivisor_s1_agent:rp_data -> router_019:sink_data
	wire          nios_oscdivisor_s1_agent_rp_ready;                                                  // router_019:sink_ready -> nios_oscdivisor_s1_agent:rp_ready
	wire          nios_oscdivisor_s1_agent_rp_startofpacket;                                          // nios_oscdivisor_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          nios_oscdivisor_s1_agent_rp_endofpacket;                                            // nios_oscdivisor_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [107:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                               // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [18:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          spi_0_spi_control_port_agent_rp_valid;                                              // spi_0_spi_control_port_agent:rp_valid -> router_020:sink_valid
	wire  [107:0] spi_0_spi_control_port_agent_rp_data;                                               // spi_0_spi_control_port_agent:rp_data -> router_020:sink_data
	wire          spi_0_spi_control_port_agent_rp_ready;                                              // router_020:sink_ready -> spi_0_spi_control_port_agent:rp_ready
	wire          spi_0_spi_control_port_agent_rp_startofpacket;                                      // spi_0_spi_control_port_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          spi_0_spi_control_port_agent_rp_endofpacket;                                        // spi_0_spi_control_port_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [107:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [18:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          sdram_controller_0_s1_burst_adapter_source0_valid;                                  // sdram_controller_0_s1_burst_adapter:source0_valid -> sdram_controller_0_s1_agent:cp_valid
	wire   [89:0] sdram_controller_0_s1_burst_adapter_source0_data;                                   // sdram_controller_0_s1_burst_adapter:source0_data -> sdram_controller_0_s1_agent:cp_data
	wire          sdram_controller_0_s1_burst_adapter_source0_ready;                                  // sdram_controller_0_s1_agent:cp_ready -> sdram_controller_0_s1_burst_adapter:source0_ready
	wire   [18:0] sdram_controller_0_s1_burst_adapter_source0_channel;                                // sdram_controller_0_s1_burst_adapter:source0_channel -> sdram_controller_0_s1_agent:cp_channel
	wire          sdram_controller_0_s1_burst_adapter_source0_startofpacket;                          // sdram_controller_0_s1_burst_adapter:source0_startofpacket -> sdram_controller_0_s1_agent:cp_startofpacket
	wire          sdram_controller_0_s1_burst_adapter_source0_endofpacket;                            // sdram_controller_0_s1_burst_adapter:source0_endofpacket -> sdram_controller_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [18:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [18:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [107:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire   [18:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_004:sink1_valid
	wire  [107:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_004:sink1_ready -> cmd_demux_001:src1_ready
	wire   [18:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [18:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [107:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire   [18:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [18:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> rsp_mux_001:sink1_valid
	wire  [107:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_004_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_004:src1_ready
	wire   [18:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> sdram_controller_0_s1_rsp_width_adapter:in_valid
	wire   [89:0] router_006_src_data;                                                                // router_006:src_data -> sdram_controller_0_s1_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                                               // sdram_controller_0_s1_rsp_width_adapter:in_ready -> router_006:src_ready
	wire   [18:0] router_006_src_channel;                                                             // router_006:src_channel -> sdram_controller_0_s1_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> sdram_controller_0_s1_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> sdram_controller_0_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_controller_0_s1_rsp_width_adapter_src_valid;                                  // sdram_controller_0_s1_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [107:0] sdram_controller_0_s1_rsp_width_adapter_src_data;                                   // sdram_controller_0_s1_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          sdram_controller_0_s1_rsp_width_adapter_src_ready;                                  // rsp_demux_004:sink_ready -> sdram_controller_0_s1_rsp_width_adapter:out_ready
	wire   [18:0] sdram_controller_0_s1_rsp_width_adapter_src_channel;                                // sdram_controller_0_s1_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          sdram_controller_0_s1_rsp_width_adapter_src_startofpacket;                          // sdram_controller_0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          sdram_controller_0_s1_rsp_width_adapter_src_endofpacket;                            // sdram_controller_0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> sdram_controller_0_s1_cmd_width_adapter:in_valid
	wire  [107:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> sdram_controller_0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                                              // sdram_controller_0_s1_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire   [18:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> sdram_controller_0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> sdram_controller_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> sdram_controller_0_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_controller_0_s1_cmd_width_adapter_src_valid;                                  // sdram_controller_0_s1_cmd_width_adapter:out_valid -> sdram_controller_0_s1_burst_adapter:sink0_valid
	wire   [89:0] sdram_controller_0_s1_cmd_width_adapter_src_data;                                   // sdram_controller_0_s1_cmd_width_adapter:out_data -> sdram_controller_0_s1_burst_adapter:sink0_data
	wire          sdram_controller_0_s1_cmd_width_adapter_src_ready;                                  // sdram_controller_0_s1_burst_adapter:sink0_ready -> sdram_controller_0_s1_cmd_width_adapter:out_ready
	wire   [18:0] sdram_controller_0_s1_cmd_width_adapter_src_channel;                                // sdram_controller_0_s1_cmd_width_adapter:out_channel -> sdram_controller_0_s1_burst_adapter:sink0_channel
	wire          sdram_controller_0_s1_cmd_width_adapter_src_startofpacket;                          // sdram_controller_0_s1_cmd_width_adapter:out_startofpacket -> sdram_controller_0_s1_burst_adapter:sink0_startofpacket
	wire          sdram_controller_0_s1_cmd_width_adapter_src_endofpacket;                            // sdram_controller_0_s1_cmd_width_adapter:out_endofpacket -> sdram_controller_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> crosser:in_valid
	wire  [107:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                               // crosser:in_ready -> cmd_demux:src0_ready
	wire   [18:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [107:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [18:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [107:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                               // crosser_001:in_ready -> cmd_demux:src1_ready
	wire   [18:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] crosser_001_out_data;                                                               // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                              // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [18:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> crosser_002:in_valid
	wire  [107:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> crosser_002:in_data
	wire          cmd_demux_src2_ready;                                                               // crosser_002:in_ready -> cmd_demux:src2_ready
	wire   [18:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                              // crosser_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] crosser_002_out_data;                                                               // crosser_002:out_data -> cmd_mux_002:sink0_data
	wire          crosser_002_out_ready;                                                              // cmd_mux_002:sink0_ready -> crosser_002:out_ready
	wire   [18:0] crosser_002_out_channel;                                                            // crosser_002:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_002_out_startofpacket;                                                      // crosser_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                        // crosser_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> crosser_003:in_valid
	wire  [107:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> crosser_003:in_data
	wire          cmd_demux_src5_ready;                                                               // crosser_003:in_ready -> cmd_demux:src5_ready
	wire   [18:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> crosser_003:in_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                              // crosser_003:out_valid -> cmd_mux_005:sink0_valid
	wire  [107:0] crosser_003_out_data;                                                               // crosser_003:out_data -> cmd_mux_005:sink0_data
	wire          crosser_003_out_ready;                                                              // cmd_mux_005:sink0_ready -> crosser_003:out_ready
	wire   [18:0] crosser_003_out_channel;                                                            // crosser_003:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_003_out_startofpacket;                                                      // crosser_003:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                        // crosser_003:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> crosser_004:in_valid
	wire  [107:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> crosser_004:in_data
	wire          cmd_demux_src6_ready;                                                               // crosser_004:in_ready -> cmd_demux:src6_ready
	wire   [18:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> crosser_004:in_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                              // crosser_004:out_valid -> cmd_mux_006:sink0_valid
	wire  [107:0] crosser_004_out_data;                                                               // crosser_004:out_data -> cmd_mux_006:sink0_data
	wire          crosser_004_out_ready;                                                              // cmd_mux_006:sink0_ready -> crosser_004:out_ready
	wire   [18:0] crosser_004_out_channel;                                                            // crosser_004:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_004_out_startofpacket;                                                      // crosser_004:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                        // crosser_004:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> crosser_005:in_valid
	wire  [107:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> crosser_005:in_data
	wire          cmd_demux_src7_ready;                                                               // crosser_005:in_ready -> cmd_demux:src7_ready
	wire   [18:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> crosser_005:in_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                              // crosser_005:out_valid -> cmd_mux_007:sink0_valid
	wire  [107:0] crosser_005_out_data;                                                               // crosser_005:out_data -> cmd_mux_007:sink0_data
	wire          crosser_005_out_ready;                                                              // cmd_mux_007:sink0_ready -> crosser_005:out_ready
	wire   [18:0] crosser_005_out_channel;                                                            // crosser_005:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_005_out_startofpacket;                                                      // crosser_005:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                        // crosser_005:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> crosser_006:in_valid
	wire  [107:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> crosser_006:in_data
	wire          cmd_demux_src8_ready;                                                               // crosser_006:in_ready -> cmd_demux:src8_ready
	wire   [18:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> crosser_006:in_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                              // crosser_006:out_valid -> cmd_mux_008:sink0_valid
	wire  [107:0] crosser_006_out_data;                                                               // crosser_006:out_data -> cmd_mux_008:sink0_data
	wire          crosser_006_out_ready;                                                              // cmd_mux_008:sink0_ready -> crosser_006:out_ready
	wire   [18:0] crosser_006_out_channel;                                                            // crosser_006:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_006_out_startofpacket;                                                      // crosser_006:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                        // crosser_006:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> crosser_007:in_valid
	wire  [107:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> crosser_007:in_data
	wire          cmd_demux_src9_ready;                                                               // crosser_007:in_ready -> cmd_demux:src9_ready
	wire   [18:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> crosser_007:in_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                              // crosser_007:out_valid -> cmd_mux_009:sink0_valid
	wire  [107:0] crosser_007_out_data;                                                               // crosser_007:out_data -> cmd_mux_009:sink0_data
	wire          crosser_007_out_ready;                                                              // cmd_mux_009:sink0_ready -> crosser_007:out_ready
	wire   [18:0] crosser_007_out_channel;                                                            // crosser_007:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_007_out_startofpacket;                                                      // crosser_007:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                        // crosser_007:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> crosser_008:in_valid
	wire  [107:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> crosser_008:in_data
	wire          cmd_demux_src10_ready;                                                              // crosser_008:in_ready -> cmd_demux:src10_ready
	wire   [18:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> crosser_008:in_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                              // crosser_008:out_valid -> cmd_mux_010:sink0_valid
	wire  [107:0] crosser_008_out_data;                                                               // crosser_008:out_data -> cmd_mux_010:sink0_data
	wire          crosser_008_out_ready;                                                              // cmd_mux_010:sink0_ready -> crosser_008:out_ready
	wire   [18:0] crosser_008_out_channel;                                                            // crosser_008:out_channel -> cmd_mux_010:sink0_channel
	wire          crosser_008_out_startofpacket;                                                      // crosser_008:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          crosser_008_out_endofpacket;                                                        // crosser_008:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> crosser_009:in_valid
	wire  [107:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> crosser_009:in_data
	wire          cmd_demux_src11_ready;                                                              // crosser_009:in_ready -> cmd_demux:src11_ready
	wire   [18:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> crosser_009:in_channel
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                              // crosser_009:out_valid -> cmd_mux_011:sink0_valid
	wire  [107:0] crosser_009_out_data;                                                               // crosser_009:out_data -> cmd_mux_011:sink0_data
	wire          crosser_009_out_ready;                                                              // cmd_mux_011:sink0_ready -> crosser_009:out_ready
	wire   [18:0] crosser_009_out_channel;                                                            // crosser_009:out_channel -> cmd_mux_011:sink0_channel
	wire          crosser_009_out_startofpacket;                                                      // crosser_009:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                                                        // crosser_009:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> crosser_010:in_valid
	wire  [107:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> crosser_010:in_data
	wire          cmd_demux_src12_ready;                                                              // crosser_010:in_ready -> cmd_demux:src12_ready
	wire   [18:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> crosser_010:in_channel
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                              // crosser_010:out_valid -> cmd_mux_012:sink0_valid
	wire  [107:0] crosser_010_out_data;                                                               // crosser_010:out_data -> cmd_mux_012:sink0_data
	wire          crosser_010_out_ready;                                                              // cmd_mux_012:sink0_ready -> crosser_010:out_ready
	wire   [18:0] crosser_010_out_channel;                                                            // crosser_010:out_channel -> cmd_mux_012:sink0_channel
	wire          crosser_010_out_startofpacket;                                                      // crosser_010:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                                                        // crosser_010:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> crosser_011:in_valid
	wire  [107:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> crosser_011:in_data
	wire          cmd_demux_src13_ready;                                                              // crosser_011:in_ready -> cmd_demux:src13_ready
	wire   [18:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> crosser_011:in_channel
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                              // crosser_011:out_valid -> cmd_mux_013:sink0_valid
	wire  [107:0] crosser_011_out_data;                                                               // crosser_011:out_data -> cmd_mux_013:sink0_data
	wire          crosser_011_out_ready;                                                              // cmd_mux_013:sink0_ready -> crosser_011:out_ready
	wire   [18:0] crosser_011_out_channel;                                                            // crosser_011:out_channel -> cmd_mux_013:sink0_channel
	wire          crosser_011_out_startofpacket;                                                      // crosser_011:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                                                        // crosser_011:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> crosser_012:in_valid
	wire  [107:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> crosser_012:in_data
	wire          cmd_demux_src14_ready;                                                              // crosser_012:in_ready -> cmd_demux:src14_ready
	wire   [18:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> crosser_012:in_channel
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> crosser_012:in_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                              // crosser_012:out_valid -> cmd_mux_014:sink0_valid
	wire  [107:0] crosser_012_out_data;                                                               // crosser_012:out_data -> cmd_mux_014:sink0_data
	wire          crosser_012_out_ready;                                                              // cmd_mux_014:sink0_ready -> crosser_012:out_ready
	wire   [18:0] crosser_012_out_channel;                                                            // crosser_012:out_channel -> cmd_mux_014:sink0_channel
	wire          crosser_012_out_startofpacket;                                                      // crosser_012:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                                                        // crosser_012:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> crosser_013:in_valid
	wire  [107:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> crosser_013:in_data
	wire          cmd_demux_src15_ready;                                                              // crosser_013:in_ready -> cmd_demux:src15_ready
	wire   [18:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> crosser_013:in_channel
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> crosser_013:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                              // crosser_013:out_valid -> cmd_mux_015:sink0_valid
	wire  [107:0] crosser_013_out_data;                                                               // crosser_013:out_data -> cmd_mux_015:sink0_data
	wire          crosser_013_out_ready;                                                              // cmd_mux_015:sink0_ready -> crosser_013:out_ready
	wire   [18:0] crosser_013_out_channel;                                                            // crosser_013:out_channel -> cmd_mux_015:sink0_channel
	wire          crosser_013_out_startofpacket;                                                      // crosser_013:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                                        // crosser_013:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> crosser_014:in_valid
	wire  [107:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> crosser_014:in_data
	wire          cmd_demux_src16_ready;                                                              // crosser_014:in_ready -> cmd_demux:src16_ready
	wire   [18:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> crosser_014:in_channel
	wire          cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> crosser_014:in_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                              // crosser_014:out_valid -> cmd_mux_016:sink0_valid
	wire  [107:0] crosser_014_out_data;                                                               // crosser_014:out_data -> cmd_mux_016:sink0_data
	wire          crosser_014_out_ready;                                                              // cmd_mux_016:sink0_ready -> crosser_014:out_ready
	wire   [18:0] crosser_014_out_channel;                                                            // crosser_014:out_channel -> cmd_mux_016:sink0_channel
	wire          crosser_014_out_startofpacket;                                                      // crosser_014:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          crosser_014_out_endofpacket;                                                        // crosser_014:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                              // cmd_demux:src17_valid -> crosser_015:in_valid
	wire  [107:0] cmd_demux_src17_data;                                                               // cmd_demux:src17_data -> crosser_015:in_data
	wire          cmd_demux_src17_ready;                                                              // crosser_015:in_ready -> cmd_demux:src17_ready
	wire   [18:0] cmd_demux_src17_channel;                                                            // cmd_demux:src17_channel -> crosser_015:in_channel
	wire          cmd_demux_src17_startofpacket;                                                      // cmd_demux:src17_startofpacket -> crosser_015:in_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                        // cmd_demux:src17_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                              // crosser_015:out_valid -> cmd_mux_017:sink0_valid
	wire  [107:0] crosser_015_out_data;                                                               // crosser_015:out_data -> cmd_mux_017:sink0_data
	wire          crosser_015_out_ready;                                                              // cmd_mux_017:sink0_ready -> crosser_015:out_ready
	wire   [18:0] crosser_015_out_channel;                                                            // crosser_015:out_channel -> cmd_mux_017:sink0_channel
	wire          crosser_015_out_startofpacket;                                                      // crosser_015:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          crosser_015_out_endofpacket;                                                        // crosser_015:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                              // cmd_demux:src18_valid -> crosser_016:in_valid
	wire  [107:0] cmd_demux_src18_data;                                                               // cmd_demux:src18_data -> crosser_016:in_data
	wire          cmd_demux_src18_ready;                                                              // crosser_016:in_ready -> cmd_demux:src18_ready
	wire   [18:0] cmd_demux_src18_channel;                                                            // cmd_demux:src18_channel -> crosser_016:in_channel
	wire          cmd_demux_src18_startofpacket;                                                      // cmd_demux:src18_startofpacket -> crosser_016:in_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                        // cmd_demux:src18_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                              // crosser_016:out_valid -> cmd_mux_018:sink0_valid
	wire  [107:0] crosser_016_out_data;                                                               // crosser_016:out_data -> cmd_mux_018:sink0_data
	wire          crosser_016_out_ready;                                                              // cmd_mux_018:sink0_ready -> crosser_016:out_ready
	wire   [18:0] crosser_016_out_channel;                                                            // crosser_016:out_channel -> cmd_mux_018:sink0_channel
	wire          crosser_016_out_startofpacket;                                                      // crosser_016:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          crosser_016_out_endofpacket;                                                        // crosser_016:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> crosser_017:in_valid
	wire  [107:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> crosser_017:in_data
	wire          rsp_demux_src0_ready;                                                               // crosser_017:in_ready -> rsp_demux:src0_ready
	wire   [18:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> crosser_017:in_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                              // crosser_017:out_valid -> rsp_mux:sink0_valid
	wire  [107:0] crosser_017_out_data;                                                               // crosser_017:out_data -> rsp_mux:sink0_data
	wire          crosser_017_out_ready;                                                              // rsp_mux:sink0_ready -> crosser_017:out_ready
	wire   [18:0] crosser_017_out_channel;                                                            // crosser_017:out_channel -> rsp_mux:sink0_channel
	wire          crosser_017_out_startofpacket;                                                      // crosser_017:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_017_out_endofpacket;                                                        // crosser_017:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> crosser_018:in_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> crosser_018:in_data
	wire          rsp_demux_001_src0_ready;                                                           // crosser_018:in_ready -> rsp_demux_001:src0_ready
	wire   [18:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> crosser_018:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                              // crosser_018:out_valid -> rsp_mux:sink1_valid
	wire  [107:0] crosser_018_out_data;                                                               // crosser_018:out_data -> rsp_mux:sink1_data
	wire          crosser_018_out_ready;                                                              // rsp_mux:sink1_ready -> crosser_018:out_ready
	wire   [18:0] crosser_018_out_channel;                                                            // crosser_018:out_channel -> rsp_mux:sink1_channel
	wire          crosser_018_out_startofpacket;                                                      // crosser_018:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_018_out_endofpacket;                                                        // crosser_018:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> crosser_019:in_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> crosser_019:in_data
	wire          rsp_demux_002_src0_ready;                                                           // crosser_019:in_ready -> rsp_demux_002:src0_ready
	wire   [18:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> crosser_019:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                              // crosser_019:out_valid -> rsp_mux:sink2_valid
	wire  [107:0] crosser_019_out_data;                                                               // crosser_019:out_data -> rsp_mux:sink2_data
	wire          crosser_019_out_ready;                                                              // rsp_mux:sink2_ready -> crosser_019:out_ready
	wire   [18:0] crosser_019_out_channel;                                                            // crosser_019:out_channel -> rsp_mux:sink2_channel
	wire          crosser_019_out_startofpacket;                                                      // crosser_019:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_019_out_endofpacket;                                                        // crosser_019:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> crosser_020:in_valid
	wire  [107:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> crosser_020:in_data
	wire          rsp_demux_005_src0_ready;                                                           // crosser_020:in_ready -> rsp_demux_005:src0_ready
	wire   [18:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> crosser_020:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> crosser_020:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                              // crosser_020:out_valid -> rsp_mux:sink5_valid
	wire  [107:0] crosser_020_out_data;                                                               // crosser_020:out_data -> rsp_mux:sink5_data
	wire          crosser_020_out_ready;                                                              // rsp_mux:sink5_ready -> crosser_020:out_ready
	wire   [18:0] crosser_020_out_channel;                                                            // crosser_020:out_channel -> rsp_mux:sink5_channel
	wire          crosser_020_out_startofpacket;                                                      // crosser_020:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_020_out_endofpacket;                                                        // crosser_020:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> crosser_021:in_valid
	wire  [107:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> crosser_021:in_data
	wire          rsp_demux_006_src0_ready;                                                           // crosser_021:in_ready -> rsp_demux_006:src0_ready
	wire   [18:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> crosser_021:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> crosser_021:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                              // crosser_021:out_valid -> rsp_mux:sink6_valid
	wire  [107:0] crosser_021_out_data;                                                               // crosser_021:out_data -> rsp_mux:sink6_data
	wire          crosser_021_out_ready;                                                              // rsp_mux:sink6_ready -> crosser_021:out_ready
	wire   [18:0] crosser_021_out_channel;                                                            // crosser_021:out_channel -> rsp_mux:sink6_channel
	wire          crosser_021_out_startofpacket;                                                      // crosser_021:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_021_out_endofpacket;                                                        // crosser_021:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> crosser_022:in_valid
	wire  [107:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> crosser_022:in_data
	wire          rsp_demux_007_src0_ready;                                                           // crosser_022:in_ready -> rsp_demux_007:src0_ready
	wire   [18:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> crosser_022:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> crosser_022:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                              // crosser_022:out_valid -> rsp_mux:sink7_valid
	wire  [107:0] crosser_022_out_data;                                                               // crosser_022:out_data -> rsp_mux:sink7_data
	wire          crosser_022_out_ready;                                                              // rsp_mux:sink7_ready -> crosser_022:out_ready
	wire   [18:0] crosser_022_out_channel;                                                            // crosser_022:out_channel -> rsp_mux:sink7_channel
	wire          crosser_022_out_startofpacket;                                                      // crosser_022:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_022_out_endofpacket;                                                        // crosser_022:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> crosser_023:in_valid
	wire  [107:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> crosser_023:in_data
	wire          rsp_demux_008_src0_ready;                                                           // crosser_023:in_ready -> rsp_demux_008:src0_ready
	wire   [18:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> crosser_023:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> crosser_023:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                              // crosser_023:out_valid -> rsp_mux:sink8_valid
	wire  [107:0] crosser_023_out_data;                                                               // crosser_023:out_data -> rsp_mux:sink8_data
	wire          crosser_023_out_ready;                                                              // rsp_mux:sink8_ready -> crosser_023:out_ready
	wire   [18:0] crosser_023_out_channel;                                                            // crosser_023:out_channel -> rsp_mux:sink8_channel
	wire          crosser_023_out_startofpacket;                                                      // crosser_023:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          crosser_023_out_endofpacket;                                                        // crosser_023:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> crosser_024:in_valid
	wire  [107:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> crosser_024:in_data
	wire          rsp_demux_009_src0_ready;                                                           // crosser_024:in_ready -> rsp_demux_009:src0_ready
	wire   [18:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> crosser_024:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> crosser_024:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> crosser_024:in_endofpacket
	wire          crosser_024_out_valid;                                                              // crosser_024:out_valid -> rsp_mux:sink9_valid
	wire  [107:0] crosser_024_out_data;                                                               // crosser_024:out_data -> rsp_mux:sink9_data
	wire          crosser_024_out_ready;                                                              // rsp_mux:sink9_ready -> crosser_024:out_ready
	wire   [18:0] crosser_024_out_channel;                                                            // crosser_024:out_channel -> rsp_mux:sink9_channel
	wire          crosser_024_out_startofpacket;                                                      // crosser_024:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          crosser_024_out_endofpacket;                                                        // crosser_024:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> crosser_025:in_valid
	wire  [107:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> crosser_025:in_data
	wire          rsp_demux_010_src0_ready;                                                           // crosser_025:in_ready -> rsp_demux_010:src0_ready
	wire   [18:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> crosser_025:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> crosser_025:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> crosser_025:in_endofpacket
	wire          crosser_025_out_valid;                                                              // crosser_025:out_valid -> rsp_mux:sink10_valid
	wire  [107:0] crosser_025_out_data;                                                               // crosser_025:out_data -> rsp_mux:sink10_data
	wire          crosser_025_out_ready;                                                              // rsp_mux:sink10_ready -> crosser_025:out_ready
	wire   [18:0] crosser_025_out_channel;                                                            // crosser_025:out_channel -> rsp_mux:sink10_channel
	wire          crosser_025_out_startofpacket;                                                      // crosser_025:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          crosser_025_out_endofpacket;                                                        // crosser_025:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> crosser_026:in_valid
	wire  [107:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> crosser_026:in_data
	wire          rsp_demux_011_src0_ready;                                                           // crosser_026:in_ready -> rsp_demux_011:src0_ready
	wire   [18:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> crosser_026:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> crosser_026:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> crosser_026:in_endofpacket
	wire          crosser_026_out_valid;                                                              // crosser_026:out_valid -> rsp_mux:sink11_valid
	wire  [107:0] crosser_026_out_data;                                                               // crosser_026:out_data -> rsp_mux:sink11_data
	wire          crosser_026_out_ready;                                                              // rsp_mux:sink11_ready -> crosser_026:out_ready
	wire   [18:0] crosser_026_out_channel;                                                            // crosser_026:out_channel -> rsp_mux:sink11_channel
	wire          crosser_026_out_startofpacket;                                                      // crosser_026:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire          crosser_026_out_endofpacket;                                                        // crosser_026:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> crosser_027:in_valid
	wire  [107:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> crosser_027:in_data
	wire          rsp_demux_012_src0_ready;                                                           // crosser_027:in_ready -> rsp_demux_012:src0_ready
	wire   [18:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> crosser_027:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> crosser_027:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> crosser_027:in_endofpacket
	wire          crosser_027_out_valid;                                                              // crosser_027:out_valid -> rsp_mux:sink12_valid
	wire  [107:0] crosser_027_out_data;                                                               // crosser_027:out_data -> rsp_mux:sink12_data
	wire          crosser_027_out_ready;                                                              // rsp_mux:sink12_ready -> crosser_027:out_ready
	wire   [18:0] crosser_027_out_channel;                                                            // crosser_027:out_channel -> rsp_mux:sink12_channel
	wire          crosser_027_out_startofpacket;                                                      // crosser_027:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          crosser_027_out_endofpacket;                                                        // crosser_027:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> crosser_028:in_valid
	wire  [107:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> crosser_028:in_data
	wire          rsp_demux_013_src0_ready;                                                           // crosser_028:in_ready -> rsp_demux_013:src0_ready
	wire   [18:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> crosser_028:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> crosser_028:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> crosser_028:in_endofpacket
	wire          crosser_028_out_valid;                                                              // crosser_028:out_valid -> rsp_mux:sink13_valid
	wire  [107:0] crosser_028_out_data;                                                               // crosser_028:out_data -> rsp_mux:sink13_data
	wire          crosser_028_out_ready;                                                              // rsp_mux:sink13_ready -> crosser_028:out_ready
	wire   [18:0] crosser_028_out_channel;                                                            // crosser_028:out_channel -> rsp_mux:sink13_channel
	wire          crosser_028_out_startofpacket;                                                      // crosser_028:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire          crosser_028_out_endofpacket;                                                        // crosser_028:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> crosser_029:in_valid
	wire  [107:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> crosser_029:in_data
	wire          rsp_demux_014_src0_ready;                                                           // crosser_029:in_ready -> rsp_demux_014:src0_ready
	wire   [18:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> crosser_029:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> crosser_029:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> crosser_029:in_endofpacket
	wire          crosser_029_out_valid;                                                              // crosser_029:out_valid -> rsp_mux:sink14_valid
	wire  [107:0] crosser_029_out_data;                                                               // crosser_029:out_data -> rsp_mux:sink14_data
	wire          crosser_029_out_ready;                                                              // rsp_mux:sink14_ready -> crosser_029:out_ready
	wire   [18:0] crosser_029_out_channel;                                                            // crosser_029:out_channel -> rsp_mux:sink14_channel
	wire          crosser_029_out_startofpacket;                                                      // crosser_029:out_startofpacket -> rsp_mux:sink14_startofpacket
	wire          crosser_029_out_endofpacket;                                                        // crosser_029:out_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> crosser_030:in_valid
	wire  [107:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> crosser_030:in_data
	wire          rsp_demux_015_src0_ready;                                                           // crosser_030:in_ready -> rsp_demux_015:src0_ready
	wire   [18:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> crosser_030:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> crosser_030:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> crosser_030:in_endofpacket
	wire          crosser_030_out_valid;                                                              // crosser_030:out_valid -> rsp_mux:sink15_valid
	wire  [107:0] crosser_030_out_data;                                                               // crosser_030:out_data -> rsp_mux:sink15_data
	wire          crosser_030_out_ready;                                                              // rsp_mux:sink15_ready -> crosser_030:out_ready
	wire   [18:0] crosser_030_out_channel;                                                            // crosser_030:out_channel -> rsp_mux:sink15_channel
	wire          crosser_030_out_startofpacket;                                                      // crosser_030:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          crosser_030_out_endofpacket;                                                        // crosser_030:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> crosser_031:in_valid
	wire  [107:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> crosser_031:in_data
	wire          rsp_demux_016_src0_ready;                                                           // crosser_031:in_ready -> rsp_demux_016:src0_ready
	wire   [18:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> crosser_031:in_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> crosser_031:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> crosser_031:in_endofpacket
	wire          crosser_031_out_valid;                                                              // crosser_031:out_valid -> rsp_mux:sink16_valid
	wire  [107:0] crosser_031_out_data;                                                               // crosser_031:out_data -> rsp_mux:sink16_data
	wire          crosser_031_out_ready;                                                              // rsp_mux:sink16_ready -> crosser_031:out_ready
	wire   [18:0] crosser_031_out_channel;                                                            // crosser_031:out_channel -> rsp_mux:sink16_channel
	wire          crosser_031_out_startofpacket;                                                      // crosser_031:out_startofpacket -> rsp_mux:sink16_startofpacket
	wire          crosser_031_out_endofpacket;                                                        // crosser_031:out_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> crosser_032:in_valid
	wire  [107:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> crosser_032:in_data
	wire          rsp_demux_017_src0_ready;                                                           // crosser_032:in_ready -> rsp_demux_017:src0_ready
	wire   [18:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> crosser_032:in_channel
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> crosser_032:in_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> crosser_032:in_endofpacket
	wire          crosser_032_out_valid;                                                              // crosser_032:out_valid -> rsp_mux:sink17_valid
	wire  [107:0] crosser_032_out_data;                                                               // crosser_032:out_data -> rsp_mux:sink17_data
	wire          crosser_032_out_ready;                                                              // rsp_mux:sink17_ready -> crosser_032:out_ready
	wire   [18:0] crosser_032_out_channel;                                                            // crosser_032:out_channel -> rsp_mux:sink17_channel
	wire          crosser_032_out_startofpacket;                                                      // crosser_032:out_startofpacket -> rsp_mux:sink17_startofpacket
	wire          crosser_032_out_endofpacket;                                                        // crosser_032:out_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> crosser_033:in_valid
	wire  [107:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> crosser_033:in_data
	wire          rsp_demux_018_src0_ready;                                                           // crosser_033:in_ready -> rsp_demux_018:src0_ready
	wire   [18:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> crosser_033:in_channel
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> crosser_033:in_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> crosser_033:in_endofpacket
	wire          crosser_033_out_valid;                                                              // crosser_033:out_valid -> rsp_mux:sink18_valid
	wire  [107:0] crosser_033_out_data;                                                               // crosser_033:out_data -> rsp_mux:sink18_data
	wire          crosser_033_out_ready;                                                              // rsp_mux:sink18_ready -> crosser_033:out_ready
	wire   [18:0] crosser_033_out_channel;                                                            // crosser_033:out_channel -> rsp_mux:sink18_channel
	wire          crosser_033_out_startofpacket;                                                      // crosser_033:out_startofpacket -> rsp_mux:sink18_startofpacket
	wire          crosser_033_out_endofpacket;                                                        // crosser_033:out_endofpacket -> rsp_mux:sink18_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                           // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                            // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid;                              // sysid_qsys_0_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_out_data;                               // sysid_qsys_0_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_001:in_0_ready -> sysid_qsys_0_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          i2c_0_csr_agent_rdata_fifo_out_valid;                                               // i2c_0_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] i2c_0_csr_agent_rdata_fifo_out_data;                                                // i2c_0_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          i2c_0_csr_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_002:in_0_ready -> i2c_0_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> i2c_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> i2c_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // i2c_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> i2c_0_csr_agent:rdata_fifo_sink_error
	wire          nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid;                          // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data;                           // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_003:in_0_ready -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_error
	wire          sdram_controller_0_s1_agent_rdata_fifo_out_valid;                                   // sdram_controller_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [17:0] sdram_controller_0_s1_agent_rdata_fifo_out_data;                                    // sdram_controller_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          sdram_controller_0_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_004:in_0_ready -> sdram_controller_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> sdram_controller_0_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> sdram_controller_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // sdram_controller_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> sdram_controller_0_s1_agent:rdata_fifo_sink_error
	wire          nios_leds_s1_agent_rdata_fifo_out_valid;                                            // nios_leds_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] nios_leds_s1_agent_rdata_fifo_out_data;                                             // nios_leds_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          nios_leds_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_005:in_0_ready -> nios_leds_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> nios_leds_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> nios_leds_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // nios_leds_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> nios_leds_s1_agent:rdata_fifo_sink_error
	wire          nios_switches_s1_agent_rdata_fifo_out_valid;                                        // nios_switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] nios_switches_s1_agent_rdata_fifo_out_data;                                         // nios_switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          nios_switches_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_006:in_0_ready -> nios_switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> nios_switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> nios_switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // nios_switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> nios_switches_s1_agent:rdata_fifo_sink_error
	wire          nios_buttons_s1_agent_rdata_fifo_out_valid;                                         // nios_buttons_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] nios_buttons_s1_agent_rdata_fifo_out_data;                                          // nios_buttons_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          nios_buttons_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_007:in_0_ready -> nios_buttons_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> nios_buttons_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> nios_buttons_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // nios_buttons_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> nios_buttons_s1_agent:rdata_fifo_sink_error
	wire          nios_uartrx_s1_agent_rdata_fifo_out_valid;                                          // nios_uartrx_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] nios_uartrx_s1_agent_rdata_fifo_out_data;                                           // nios_uartrx_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          nios_uartrx_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_008:in_0_ready -> nios_uartrx_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> nios_uartrx_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> nios_uartrx_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // nios_uartrx_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> nios_uartrx_s1_agent:rdata_fifo_sink_error
	wire          nios_i2cclk_s1_agent_rdata_fifo_out_valid;                                          // nios_i2cclk_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] nios_i2cclk_s1_agent_rdata_fifo_out_data;                                           // nios_i2cclk_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          nios_i2cclk_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_009:in_0_ready -> nios_i2cclk_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> nios_i2cclk_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> nios_i2cclk_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // nios_i2cclk_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> nios_i2cclk_s1_agent:rdata_fifo_sink_error
	wire          nios_uarttx_s1_agent_rdata_fifo_out_valid;                                          // nios_uarttx_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] nios_uarttx_s1_agent_rdata_fifo_out_data;                                           // nios_uarttx_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          nios_uarttx_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_010:in_0_ready -> nios_uarttx_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> nios_uarttx_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> nios_uarttx_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // nios_uarttx_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> nios_uarttx_s1_agent:rdata_fifo_sink_error
	wire          nios_i2cdat_s1_agent_rdata_fifo_out_valid;                                          // nios_i2cdat_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] nios_i2cdat_s1_agent_rdata_fifo_out_data;                                           // nios_i2cdat_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          nios_i2cdat_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_011:in_0_ready -> nios_i2cdat_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> nios_i2cdat_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> nios_i2cdat_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // nios_i2cdat_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> nios_i2cdat_s1_agent:rdata_fifo_sink_error
	wire          nios_i2crw_s1_agent_rdata_fifo_out_valid;                                           // nios_i2crw_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] nios_i2crw_s1_agent_rdata_fifo_out_data;                                            // nios_i2crw_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          nios_i2crw_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_012:in_0_ready -> nios_i2crw_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> nios_i2crw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> nios_i2crw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // nios_i2crw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> nios_i2crw_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_out_valid;                                              // timer_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_out_data;                                               // timer_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_013:in_0_ready -> timer_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          nios_7seg_s1_agent_rdata_fifo_out_valid;                                            // nios_7seg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] nios_7seg_s1_agent_rdata_fifo_out_data;                                             // nios_7seg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          nios_7seg_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_014:in_0_ready -> nios_7seg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> nios_7seg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> nios_7seg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // nios_7seg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> nios_7seg_s1_agent:rdata_fifo_sink_error
	wire          nios_header_conn_s1_agent_rdata_fifo_out_valid;                                     // nios_header_conn_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] nios_header_conn_s1_agent_rdata_fifo_out_data;                                      // nios_header_conn_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          nios_header_conn_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_015:in_0_ready -> nios_header_conn_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> nios_header_conn_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> nios_header_conn_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // nios_header_conn_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> nios_header_conn_s1_agent:rdata_fifo_sink_error
	wire          uart_0_s1_agent_rdata_fifo_out_valid;                                               // uart_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] uart_0_s1_agent_rdata_fifo_out_data;                                                // uart_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          uart_0_s1_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_016:in_0_ready -> uart_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> uart_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> uart_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                  // uart_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> uart_0_s1_agent:rdata_fifo_sink_error
	wire          nios_oscdivisor_s1_agent_rdata_fifo_out_valid;                                      // nios_oscdivisor_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] nios_oscdivisor_s1_agent_rdata_fifo_out_data;                                       // nios_oscdivisor_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          nios_oscdivisor_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_017:in_0_ready -> nios_oscdivisor_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                  // avalon_st_adapter_017:out_0_valid -> nios_oscdivisor_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                   // avalon_st_adapter_017:out_0_data -> nios_oscdivisor_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                  // nios_oscdivisor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                  // avalon_st_adapter_017:out_0_error -> nios_oscdivisor_s1_agent:rdata_fifo_sink_error
	wire          spi_0_spi_control_port_agent_rdata_fifo_out_valid;                                  // spi_0_spi_control_port_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] spi_0_spi_control_port_agent_rdata_fifo_out_data;                                   // spi_0_spi_control_port_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          spi_0_spi_control_port_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_018:in_0_ready -> spi_0_spi_control_port_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                  // avalon_st_adapter_018:out_0_valid -> spi_0_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                   // avalon_st_adapter_018:out_0_data -> spi_0_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                  // spi_0_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                  // avalon_st_adapter_018:out_0_error -> spi_0_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_qsys_0_data_master_translator (
		.clk                    (pll_0_outclk1_clk),                                                           //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_qsys_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_qsys_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_qsys_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_qsys_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_qsys_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_0_instruction_master_translator (
		.clk                    (pll_0_outclk1_clk),                                                                  //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_qsys_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                    //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_0_csr_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_0_csr_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_0_csr_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (i2c_0_csr_agent_m0_read),                       //                         .read
		.uav_write              (i2c_0_csr_agent_m0_write),                      //                         .write
		.uav_waitrequest        (i2c_0_csr_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (i2c_0_csr_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (i2c_0_csr_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (i2c_0_csr_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (i2c_0_csr_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (i2c_0_csr_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (i2c_0_csr_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (i2c_0_csr_address),                             //      avalon_anti_slave_0.address
		.av_write               (i2c_0_csr_write),                               //                         .write
		.av_read                (i2c_0_csr_read),                                //                         .read
		.av_readdata            (i2c_0_csr_readdata),                            //                         .readdata
		.av_writedata           (i2c_0_csr_writedata),                           //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_qsys_0_jtag_debug_module_translator (
		.clk                    (pll_0_outclk1_clk),                                     //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_qsys_0_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_qsys_0_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_qsys_0_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (nios2_qsys_0_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_qsys_0_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_qsys_0_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_qsys_0_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_qsys_0_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_qsys_0_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_qsys_0_jtag_debug_module_write),                  //                         .write
		.av_read                (nios2_qsys_0_jtag_debug_module_read),                   //                         .read
		.av_readdata            (nios2_qsys_0_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (nios2_qsys_0_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (nios2_qsys_0_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_qsys_0_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_qsys_0_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_0_s1_translator (
		.clk                    (pll_0_outclk1_clk),                                //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sdram_controller_0_s1_agent_m0_read),              //                         .read
		.uav_write              (sdram_controller_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (sdram_controller_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sdram_controller_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sdram_controller_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sdram_controller_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sdram_controller_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sdram_controller_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (sdram_controller_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_0_s1_write),                      //                         .write
		.av_read                (sdram_controller_0_s1_read),                       //                         .read
		.av_readdata            (sdram_controller_0_s1_readdata),                   //                         .readdata
		.av_writedata           (sdram_controller_0_s1_writedata),                  //                         .writedata
		.av_byteenable          (sdram_controller_0_s1_byteenable),                 //                         .byteenable
		.av_readdatavalid       (sdram_controller_0_s1_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (sdram_controller_0_s1_waitrequest),                //                         .waitrequest
		.av_chipselect          (sdram_controller_0_s1_chipselect),                 //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_leds_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_leds_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (nios_leds_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (nios_leds_s1_agent_m0_read),                    //                         .read
		.uav_write              (nios_leds_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (nios_leds_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (nios_leds_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (nios_leds_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (nios_leds_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (nios_leds_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (nios_leds_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (nios_leds_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (nios_leds_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (nios_leds_s1_write),                            //                         .write
		.av_readdata            (nios_leds_s1_readdata),                         //                         .readdata
		.av_writedata           (nios_leds_s1_writedata),                        //                         .writedata
		.av_chipselect          (nios_leds_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_switches_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_switches_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (nios_switches_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (nios_switches_s1_agent_m0_read),                //                         .read
		.uav_write              (nios_switches_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (nios_switches_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (nios_switches_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (nios_switches_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (nios_switches_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (nios_switches_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (nios_switches_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (nios_switches_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (nios_switches_s1_address),                      //      avalon_anti_slave_0.address
		.av_readdata            (nios_switches_s1_readdata),                     //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_buttons_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_buttons_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (nios_buttons_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (nios_buttons_s1_agent_m0_read),                 //                         .read
		.uav_write              (nios_buttons_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (nios_buttons_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (nios_buttons_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (nios_buttons_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (nios_buttons_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (nios_buttons_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (nios_buttons_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (nios_buttons_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (nios_buttons_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (nios_buttons_s1_readdata),                      //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_uartrx_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_uartrx_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (nios_uartrx_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (nios_uartrx_s1_agent_m0_read),                  //                         .read
		.uav_write              (nios_uartrx_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (nios_uartrx_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (nios_uartrx_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (nios_uartrx_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (nios_uartrx_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (nios_uartrx_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (nios_uartrx_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (nios_uartrx_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (nios_uartrx_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (nios_uartrx_s1_readdata),                       //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_i2cclk_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_i2cclk_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (nios_i2cclk_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (nios_i2cclk_s1_agent_m0_read),                  //                         .read
		.uav_write              (nios_i2cclk_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (nios_i2cclk_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (nios_i2cclk_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (nios_i2cclk_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (nios_i2cclk_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (nios_i2cclk_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (nios_i2cclk_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (nios_i2cclk_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (nios_i2cclk_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (nios_i2cclk_s1_write),                          //                         .write
		.av_readdata            (nios_i2cclk_s1_readdata),                       //                         .readdata
		.av_writedata           (nios_i2cclk_s1_writedata),                      //                         .writedata
		.av_chipselect          (nios_i2cclk_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_uarttx_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_uarttx_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (nios_uarttx_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (nios_uarttx_s1_agent_m0_read),                  //                         .read
		.uav_write              (nios_uarttx_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (nios_uarttx_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (nios_uarttx_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (nios_uarttx_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (nios_uarttx_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (nios_uarttx_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (nios_uarttx_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (nios_uarttx_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (nios_uarttx_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (nios_uarttx_s1_write),                          //                         .write
		.av_readdata            (nios_uarttx_s1_readdata),                       //                         .readdata
		.av_writedata           (nios_uarttx_s1_writedata),                      //                         .writedata
		.av_chipselect          (nios_uarttx_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_i2cdat_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_i2cdat_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (nios_i2cdat_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (nios_i2cdat_s1_agent_m0_read),                  //                         .read
		.uav_write              (nios_i2cdat_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (nios_i2cdat_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (nios_i2cdat_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (nios_i2cdat_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (nios_i2cdat_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (nios_i2cdat_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (nios_i2cdat_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (nios_i2cdat_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (nios_i2cdat_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (nios_i2cdat_s1_write),                          //                         .write
		.av_readdata            (nios_i2cdat_s1_readdata),                       //                         .readdata
		.av_writedata           (nios_i2cdat_s1_writedata),                      //                         .writedata
		.av_chipselect          (nios_i2cdat_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_i2crw_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_i2crw_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (nios_i2crw_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (nios_i2crw_s1_agent_m0_read),                   //                         .read
		.uav_write              (nios_i2crw_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (nios_i2crw_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (nios_i2crw_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (nios_i2crw_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (nios_i2crw_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (nios_i2crw_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (nios_i2crw_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (nios_i2crw_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (nios_i2crw_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (nios_i2crw_s1_write),                           //                         .write
		.av_readdata            (nios_i2crw_s1_readdata),                        //                         .readdata
		.av_writedata           (nios_i2crw_s1_writedata),                       //                         .writedata
		.av_chipselect          (nios_i2crw_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                      //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (timer_0_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                              //                         .write
		.av_readdata            (timer_0_s1_readdata),                           //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                          //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_7seg_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_7seg_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (nios_7seg_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (nios_7seg_s1_agent_m0_read),                    //                         .read
		.uav_write              (nios_7seg_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (nios_7seg_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (nios_7seg_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (nios_7seg_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (nios_7seg_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (nios_7seg_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (nios_7seg_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (nios_7seg_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (nios_7seg_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (nios_7seg_s1_write),                            //                         .write
		.av_readdata            (nios_7seg_s1_readdata),                         //                         .readdata
		.av_writedata           (nios_7seg_s1_writedata),                        //                         .writedata
		.av_chipselect          (nios_7seg_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_header_conn_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_header_conn_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (nios_header_conn_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (nios_header_conn_s1_agent_m0_read),             //                         .read
		.uav_write              (nios_header_conn_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (nios_header_conn_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (nios_header_conn_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (nios_header_conn_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (nios_header_conn_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (nios_header_conn_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (nios_header_conn_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (nios_header_conn_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (nios_header_conn_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (nios_header_conn_s1_write),                     //                         .write
		.av_readdata            (nios_header_conn_s1_readdata),                  //                         .readdata
		.av_writedata           (nios_header_conn_s1_writedata),                 //                         .writedata
		.av_chipselect          (nios_header_conn_s1_chipselect),                //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_0_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_0_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (uart_0_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (uart_0_s1_agent_m0_read),                       //                         .read
		.uav_write              (uart_0_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (uart_0_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (uart_0_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (uart_0_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (uart_0_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (uart_0_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (uart_0_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (uart_0_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (uart_0_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (uart_0_s1_write),                               //                         .write
		.av_read                (uart_0_s1_read),                                //                         .read
		.av_readdata            (uart_0_s1_readdata),                            //                         .readdata
		.av_writedata           (uart_0_s1_writedata),                           //                         .writedata
		.av_begintransfer       (uart_0_s1_begintransfer),                       //                         .begintransfer
		.av_chipselect          (uart_0_s1_chipselect),                          //                         .chipselect
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_oscdivisor_s1_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_oscdivisor_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (nios_oscdivisor_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (nios_oscdivisor_s1_agent_m0_read),              //                         .read
		.uav_write              (nios_oscdivisor_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (nios_oscdivisor_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (nios_oscdivisor_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (nios_oscdivisor_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (nios_oscdivisor_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (nios_oscdivisor_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (nios_oscdivisor_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (nios_oscdivisor_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (nios_oscdivisor_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (nios_oscdivisor_s1_write),                      //                         .write
		.av_readdata            (nios_oscdivisor_s1_readdata),                   //                         .readdata
		.av_writedata           (nios_oscdivisor_s1_writedata),                  //                         .writedata
		.av_chipselect          (nios_oscdivisor_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_0_spi_control_port_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (spi_0_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (spi_0_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (spi_0_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (spi_0_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (spi_0_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (spi_0_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (spi_0_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (spi_0_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (spi_0_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (spi_0_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (spi_0_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (spi_0_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (spi_0_spi_control_port_write),                  //                         .write
		.av_read                (spi_0_spi_control_port_read),                   //                         .read
		.av_readdata            (spi_0_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (spi_0_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (spi_0_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_data_master_agent (
		.clk                   (pll_0_outclk1_clk),                                                           //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_instruction_master_agent (
		.clk                   (pll_0_outclk1_clk),                                                                  //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                        //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                           //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                     //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                           //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                     //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_0_csr_agent (
		.clk                     (pll_0_outclk0_clk),                             //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_0_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (i2c_0_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (i2c_0_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (i2c_0_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (i2c_0_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (i2c_0_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (i2c_0_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (i2c_0_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (i2c_0_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (i2c_0_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (i2c_0_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (i2c_0_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (i2c_0_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (i2c_0_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (i2c_0_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (i2c_0_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_002_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                       //                .channel
		.rf_sink_ready           (i2c_0_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (i2c_0_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (i2c_0_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (i2c_0_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (i2c_0_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (i2c_0_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (i2c_0_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (i2c_0_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (i2c_0_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (i2c_0_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),             //                .error
		.rdata_fifo_src_ready    (i2c_0_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_0_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (i2c_0_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_0_csr_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_0_csr_agent_rf_source_data),                //        in.data
		.in_valid          (i2c_0_csr_agent_rf_source_valid),               //          .valid
		.in_ready          (i2c_0_csr_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (i2c_0_csr_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (i2c_0_csr_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (i2c_0_csr_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (i2c_0_csr_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (i2c_0_csr_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (i2c_0_csr_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (i2c_0_csr_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_0_csr_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_0_csr_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (i2c_0_csr_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (i2c_0_csr_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (i2c_0_csr_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (i2c_0_csr_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (i2c_0_csr_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_qsys_0_jtag_debug_module_agent (
		.clk                     (pll_0_outclk1_clk),                                               //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_qsys_0_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_qsys_0_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_qsys_0_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_qsys_0_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_qsys_0_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_qsys_0_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_qsys_0_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_qsys_0_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_qsys_0_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_qsys_0_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_qsys_0_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                         //                .channel
		.rf_sink_ready           (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_qsys_0_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_qsys_0_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_qsys_0_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_qsys_0_jtag_debug_module_agent_rsp_fifo (
		.clk               (pll_0_outclk1_clk),                                               //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_qsys_0_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_qsys_0_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_qsys_0_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (72),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_0_s1_agent (
		.clk                     (pll_0_outclk1_clk),                                         //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (sdram_controller_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_controller_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_controller_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_controller_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_controller_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_controller_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_controller_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_controller_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_controller_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_controller_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_controller_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_controller_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_controller_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_controller_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_controller_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_controller_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_controller_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_controller_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_controller_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_controller_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_controller_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_controller_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_controller_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_controller_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_controller_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_controller_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_controller_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_controller_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sdram_controller_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_controller_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_0_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk1_clk),                                      //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sdram_controller_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_0_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk1_clk),                                //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_controller_0_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdram_controller_0_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdram_controller_0_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdram_controller_0_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdram_controller_0_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdram_controller_0_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_leds_s1_agent (
		.clk                     (pll_0_outclk0_clk),                             //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (nios_leds_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_leds_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_leds_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_leds_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_leds_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_leds_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_leds_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_leds_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_leds_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_leds_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_leds_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_leds_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_leds_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_leds_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_leds_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_leds_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_005_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                       //                .channel
		.rf_sink_ready           (nios_leds_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_leds_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_leds_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_leds_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_leds_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_leds_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_leds_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_leds_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_leds_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_leds_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),             //                .error
		.rdata_fifo_src_ready    (nios_leds_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_leds_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_leds_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_leds_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_leds_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_leds_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_leds_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_leds_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_leds_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_leds_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_leds_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_leds_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_leds_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_leds_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_leds_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_leds_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (nios_leds_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (nios_leds_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (nios_leds_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (nios_leds_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (nios_leds_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_switches_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (nios_switches_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_switches_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_switches_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_switches_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_switches_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_switches_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_switches_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_switches_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_switches_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_switches_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_switches_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_switches_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_switches_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_switches_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_switches_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_switches_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_006_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                           //                .channel
		.rf_sink_ready           (nios_switches_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_switches_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_switches_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_switches_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_switches_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_switches_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_switches_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_switches_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_switches_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_switches_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (nios_switches_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_switches_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_switches_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_switches_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (nios_switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_switches_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_switches_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (nios_switches_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (nios_switches_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (nios_switches_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (nios_switches_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (nios_switches_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_buttons_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (nios_buttons_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_buttons_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_buttons_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_buttons_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_buttons_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_buttons_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_buttons_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_buttons_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_buttons_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_buttons_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_buttons_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_buttons_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_buttons_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_buttons_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_buttons_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_buttons_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_007_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                          //                .channel
		.rf_sink_ready           (nios_buttons_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_buttons_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_buttons_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_buttons_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_buttons_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_buttons_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_buttons_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_buttons_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_buttons_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_buttons_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                //                .error
		.rdata_fifo_src_ready    (nios_buttons_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_buttons_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_buttons_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_buttons_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nios_buttons_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_buttons_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_buttons_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_buttons_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_buttons_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_buttons_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_buttons_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_buttons_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_buttons_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_buttons_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_buttons_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_buttons_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (nios_buttons_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (nios_buttons_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (nios_buttons_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (nios_buttons_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (nios_buttons_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_uartrx_s1_agent (
		.clk                     (pll_0_outclk0_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (nios_uartrx_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_uartrx_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_uartrx_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_uartrx_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_uartrx_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_uartrx_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_uartrx_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_uartrx_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_uartrx_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_uartrx_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_uartrx_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_uartrx_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_uartrx_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_uartrx_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_uartrx_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_uartrx_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_008_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                         //                .channel
		.rf_sink_ready           (nios_uartrx_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_uartrx_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_uartrx_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_uartrx_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_uartrx_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_uartrx_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_uartrx_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_uartrx_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_uartrx_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_uartrx_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),               //                .error
		.rdata_fifo_src_ready    (nios_uartrx_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_uartrx_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_uartrx_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_uartrx_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (nios_uartrx_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_uartrx_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_uartrx_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_uartrx_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_uartrx_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_uartrx_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_uartrx_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_uartrx_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_uartrx_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_uartrx_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_uartrx_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_uartrx_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (nios_uartrx_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (nios_uartrx_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (nios_uartrx_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (nios_uartrx_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (nios_uartrx_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_i2cclk_s1_agent (
		.clk                     (pll_0_outclk0_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (nios_i2cclk_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_i2cclk_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_i2cclk_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_i2cclk_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_i2cclk_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_i2cclk_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_i2cclk_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_i2cclk_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_i2cclk_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_i2cclk_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_i2cclk_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_i2cclk_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_i2cclk_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_i2cclk_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_i2cclk_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_i2cclk_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                         //                .channel
		.rf_sink_ready           (nios_i2cclk_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_i2cclk_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_i2cclk_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_i2cclk_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_i2cclk_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_i2cclk_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_i2cclk_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_i2cclk_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_i2cclk_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_i2cclk_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),               //                .error
		.rdata_fifo_src_ready    (nios_i2cclk_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_i2cclk_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_i2cclk_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_i2cclk_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (nios_i2cclk_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_i2cclk_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_i2cclk_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_i2cclk_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_i2cclk_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_i2cclk_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_i2cclk_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_i2cclk_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_i2cclk_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_i2cclk_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_i2cclk_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_i2cclk_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (nios_i2cclk_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (nios_i2cclk_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (nios_i2cclk_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (nios_i2cclk_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (nios_i2cclk_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_uarttx_s1_agent (
		.clk                     (pll_0_outclk0_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (nios_uarttx_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_uarttx_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_uarttx_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_uarttx_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_uarttx_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_uarttx_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_uarttx_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_uarttx_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_uarttx_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_uarttx_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_uarttx_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_uarttx_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_uarttx_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_uarttx_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_uarttx_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_uarttx_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_010_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                         //                .channel
		.rf_sink_ready           (nios_uarttx_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_uarttx_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_uarttx_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_uarttx_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_uarttx_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_uarttx_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_uarttx_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_uarttx_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_uarttx_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_uarttx_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),               //                .error
		.rdata_fifo_src_ready    (nios_uarttx_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_uarttx_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_uarttx_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_uarttx_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (nios_uarttx_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_uarttx_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_uarttx_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_uarttx_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_uarttx_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_uarttx_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_uarttx_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_uarttx_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_uarttx_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_uarttx_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_uarttx_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_uarttx_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (nios_uarttx_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (nios_uarttx_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (nios_uarttx_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (nios_uarttx_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (nios_uarttx_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_i2cdat_s1_agent (
		.clk                     (pll_0_outclk0_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (nios_i2cdat_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_i2cdat_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_i2cdat_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_i2cdat_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_i2cdat_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_i2cdat_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_i2cdat_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_i2cdat_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_i2cdat_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_i2cdat_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_i2cdat_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_i2cdat_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_i2cdat_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_i2cdat_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_i2cdat_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_i2cdat_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_011_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                         //                .channel
		.rf_sink_ready           (nios_i2cdat_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_i2cdat_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_i2cdat_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_i2cdat_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_i2cdat_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_i2cdat_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_i2cdat_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_i2cdat_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_i2cdat_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_i2cdat_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),               //                .error
		.rdata_fifo_src_ready    (nios_i2cdat_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_i2cdat_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_i2cdat_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_i2cdat_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (nios_i2cdat_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_i2cdat_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_i2cdat_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_i2cdat_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_i2cdat_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_i2cdat_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_i2cdat_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_i2cdat_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_i2cdat_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_i2cdat_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_i2cdat_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_i2cdat_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (nios_i2cdat_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (nios_i2cdat_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (nios_i2cdat_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (nios_i2cdat_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (nios_i2cdat_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_i2crw_s1_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (nios_i2crw_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_i2crw_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_i2crw_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_i2crw_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_i2crw_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_i2crw_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_i2crw_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_i2crw_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_i2crw_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_i2crw_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_i2crw_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_i2crw_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_i2crw_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_i2crw_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_i2crw_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_i2crw_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_012_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                        //                .channel
		.rf_sink_ready           (nios_i2crw_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_i2crw_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_i2crw_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_i2crw_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_i2crw_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_i2crw_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_i2crw_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_i2crw_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_i2crw_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_i2crw_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),              //                .error
		.rdata_fifo_src_ready    (nios_i2crw_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_i2crw_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_i2crw_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_i2crw_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (nios_i2crw_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_i2crw_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_i2crw_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_i2crw_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_i2crw_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_i2crw_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_i2crw_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_i2crw_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_i2crw_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_i2crw_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_i2crw_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_i2crw_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (nios_i2crw_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (nios_i2crw_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (nios_i2crw_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (nios_i2crw_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (nios_i2crw_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (pll_0_outclk0_clk),                             //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_013_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                       //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),             //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),               //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (timer_0_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (timer_0_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (timer_0_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_7seg_s1_agent (
		.clk                     (pll_0_outclk0_clk),                             //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (nios_7seg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_7seg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_7seg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_7seg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_7seg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_7seg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_7seg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_7seg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_7seg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_7seg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_7seg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_7seg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_7seg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_7seg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_7seg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_7seg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_014_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                       //                .channel
		.rf_sink_ready           (nios_7seg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_7seg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_7seg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_7seg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_7seg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_7seg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_7seg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_7seg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_7seg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_7seg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),             //                .error
		.rdata_fifo_src_ready    (nios_7seg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_7seg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_7seg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_7seg_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_7seg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_7seg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_7seg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_7seg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_7seg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_7seg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_7seg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_7seg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_7seg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_7seg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_7seg_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_7seg_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (nios_7seg_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (nios_7seg_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (nios_7seg_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (nios_7seg_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (nios_7seg_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_header_conn_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                    //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (nios_header_conn_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_header_conn_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_header_conn_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_header_conn_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_header_conn_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_header_conn_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_header_conn_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_header_conn_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_header_conn_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_header_conn_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_header_conn_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_header_conn_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_header_conn_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_header_conn_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_header_conn_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_header_conn_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                              //                .channel
		.rf_sink_ready           (nios_header_conn_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_header_conn_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_header_conn_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_header_conn_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_header_conn_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_header_conn_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_header_conn_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_header_conn_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_header_conn_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_header_conn_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (nios_header_conn_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_header_conn_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_header_conn_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_header_conn_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (nios_header_conn_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_header_conn_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_header_conn_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_header_conn_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_header_conn_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_header_conn_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_header_conn_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_header_conn_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_header_conn_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_header_conn_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_header_conn_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (nios_header_conn_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios_header_conn_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios_header_conn_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios_header_conn_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios_header_conn_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios_header_conn_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart_0_s1_agent (
		.clk                     (pll_0_outclk0_clk),                             //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (uart_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (uart_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (uart_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (uart_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (uart_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (uart_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (uart_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (uart_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (uart_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (uart_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (uart_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (uart_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (uart_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (uart_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (uart_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_016_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                       //                .channel
		.rf_sink_ready           (uart_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (uart_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (uart_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (uart_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (uart_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (uart_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (uart_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (uart_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (uart_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (uart_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),             //                .error
		.rdata_fifo_src_ready    (uart_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (uart_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_0_s1_agent_rf_source_data),                //        in.data
		.in_valid          (uart_0_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (uart_0_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (uart_0_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (uart_0_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (uart_0_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (uart_0_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (uart_0_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (uart_0_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (uart_0_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_0_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (uart_0_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (uart_0_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (uart_0_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (uart_0_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (uart_0_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_oscdivisor_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                   //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (nios_oscdivisor_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_oscdivisor_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_oscdivisor_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_oscdivisor_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_oscdivisor_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_oscdivisor_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_oscdivisor_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_oscdivisor_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_oscdivisor_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_oscdivisor_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_oscdivisor_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_oscdivisor_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_oscdivisor_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_oscdivisor_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_oscdivisor_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_oscdivisor_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                             //                .channel
		.rf_sink_ready           (nios_oscdivisor_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_oscdivisor_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_oscdivisor_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_oscdivisor_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_oscdivisor_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_oscdivisor_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_oscdivisor_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_oscdivisor_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_oscdivisor_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_oscdivisor_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (nios_oscdivisor_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_oscdivisor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_oscdivisor_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_oscdivisor_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (nios_oscdivisor_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios_oscdivisor_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_oscdivisor_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_oscdivisor_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_oscdivisor_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_oscdivisor_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_oscdivisor_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_oscdivisor_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_oscdivisor_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_oscdivisor_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_oscdivisor_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios_oscdivisor_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios_oscdivisor_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios_oscdivisor_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios_oscdivisor_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios_oscdivisor_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios_oscdivisor_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_0_spi_control_port_agent (
		.clk                     (pll_0_outclk0_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (spi_0_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (spi_0_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (spi_0_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (spi_0_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (spi_0_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (spi_0_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (spi_0_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (spi_0_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (spi_0_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (spi_0_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (spi_0_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (spi_0_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (spi_0_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (spi_0_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (spi_0_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (spi_0_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                 //                .channel
		.rf_sink_ready           (spi_0_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (spi_0_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (spi_0_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (spi_0_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (spi_0_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (spi_0_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (spi_0_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (spi_0_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (spi_0_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (spi_0_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (spi_0_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_0_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (spi_0_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_0_spi_control_port_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (spi_0_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (spi_0_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_0_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_0_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_0_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_0_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_0_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_0_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_0_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_0_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_0_spi_control_port_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (spi_0_spi_control_port_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (spi_0_spi_control_port_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (spi_0_spi_control_port_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (spi_0_spi_control_port_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (spi_0_spi_control_port_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (spi_0_spi_control_port_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	nios_hps_system_mm_interconnect_0_router router (
		.sink_ready         (nios2_qsys_0_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios2_qsys_0_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios2_qsys_0_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios2_qsys_0_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                 //       src.ready
		.src_valid          (router_src_valid),                                 //          .valid
		.src_data           (router_src_data),                                  //          .data
		.src_channel        (router_src_channel),                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_qsys_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                      //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                    //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (i2c_0_csr_agent_rp_ready),                      //      sink.ready
		.sink_valid         (i2c_0_csr_agent_rp_valid),                      //          .valid
		.sink_data          (i2c_0_csr_agent_rp_data),                       //          .data
		.sink_startofpacket (i2c_0_csr_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (i2c_0_csr_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                          //       src.ready
		.src_valid          (router_004_src_valid),                          //          .valid
		.src_data           (router_004_src_data),                           //          .data
		.src_channel        (router_004_src_channel),                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (nios2_qsys_0_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                     //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //       src.ready
		.src_valid          (router_005_src_valid),                                  //          .valid
		.src_data           (router_005_src_data),                                   //          .data
		.src_channel        (router_005_src_channel),                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (sdram_controller_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (sdram_controller_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (sdram_controller_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (sdram_controller_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sdram_controller_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (nios_leds_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (nios_leds_s1_agent_rp_valid),                   //          .valid
		.sink_data          (nios_leds_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (nios_leds_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (nios_leds_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                          //       src.ready
		.src_valid          (router_007_src_valid),                          //          .valid
		.src_data           (router_007_src_data),                           //          .data
		.src_channel        (router_007_src_channel),                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (nios_switches_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (nios_switches_s1_agent_rp_valid),               //          .valid
		.sink_data          (nios_switches_s1_agent_rp_data),                //          .data
		.sink_startofpacket (nios_switches_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (nios_switches_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                          //       src.ready
		.src_valid          (router_008_src_valid),                          //          .valid
		.src_data           (router_008_src_data),                           //          .data
		.src_channel        (router_008_src_channel),                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (nios_buttons_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (nios_buttons_s1_agent_rp_valid),                //          .valid
		.sink_data          (nios_buttons_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (nios_buttons_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (nios_buttons_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (nios_uartrx_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (nios_uartrx_s1_agent_rp_valid),                 //          .valid
		.sink_data          (nios_uartrx_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (nios_uartrx_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (nios_uartrx_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (nios_i2cclk_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (nios_i2cclk_s1_agent_rp_valid),                 //          .valid
		.sink_data          (nios_i2cclk_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (nios_i2cclk_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (nios_i2cclk_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (nios_uarttx_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (nios_uarttx_s1_agent_rp_valid),                 //          .valid
		.sink_data          (nios_uarttx_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (nios_uarttx_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (nios_uarttx_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                          //       src.ready
		.src_valid          (router_012_src_valid),                          //          .valid
		.src_data           (router_012_src_data),                           //          .data
		.src_channel        (router_012_src_channel),                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (nios_i2cdat_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (nios_i2cdat_s1_agent_rp_valid),                 //          .valid
		.sink_data          (nios_i2cdat_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (nios_i2cdat_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (nios_i2cdat_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (nios_i2crw_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (nios_i2crw_s1_agent_rp_valid),                  //          .valid
		.sink_data          (nios_i2crw_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (nios_i2crw_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (nios_i2crw_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                     //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                          //       src.ready
		.src_valid          (router_015_src_valid),                          //          .valid
		.src_data           (router_015_src_data),                           //          .data
		.src_channel        (router_015_src_channel),                        //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (nios_7seg_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (nios_7seg_s1_agent_rp_valid),                   //          .valid
		.sink_data          (nios_7seg_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (nios_7seg_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (nios_7seg_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                          //       src.ready
		.src_valid          (router_016_src_valid),                          //          .valid
		.src_data           (router_016_src_data),                           //          .data
		.src_channel        (router_016_src_channel),                        //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (nios_header_conn_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (nios_header_conn_s1_agent_rp_valid),            //          .valid
		.sink_data          (nios_header_conn_s1_agent_rp_data),             //          .data
		.sink_startofpacket (nios_header_conn_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (nios_header_conn_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                          //       src.ready
		.src_valid          (router_017_src_valid),                          //          .valid
		.src_data           (router_017_src_data),                           //          .data
		.src_channel        (router_017_src_channel),                        //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (uart_0_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (uart_0_s1_agent_rp_valid),                      //          .valid
		.sink_data          (uart_0_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (uart_0_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (uart_0_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                          //       src.ready
		.src_valid          (router_018_src_valid),                          //          .valid
		.src_data           (router_018_src_data),                           //          .data
		.src_channel        (router_018_src_channel),                        //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (nios_oscdivisor_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (nios_oscdivisor_s1_agent_rp_valid),             //          .valid
		.sink_data          (nios_oscdivisor_s1_agent_rp_data),              //          .data
		.sink_startofpacket (nios_oscdivisor_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (nios_oscdivisor_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                          //       src.ready
		.src_valid          (router_019_src_valid),                          //          .valid
		.src_data           (router_019_src_data),                           //          .data
		.src_channel        (router_019_src_channel),                        //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (spi_0_spi_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (spi_0_spi_control_port_agent_rp_valid),         //          .valid
		.sink_data          (spi_0_spi_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (spi_0_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_0_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                          //       src.ready
		.src_valid          (router_020_src_valid),                          //          .valid
		.src_data           (router_020_src_data),                           //          .data
		.src_channel        (router_020_src_channel),                        //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (65),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_BURST_TYPE_H          (62),
		.PKT_BURST_TYPE_L          (61),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (55),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (53),
		.OUT_BURSTWRAP_H           (57),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_controller_0_s1_burst_adapter (
		.clk                   (pll_0_outclk1_clk),                                         //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (sdram_controller_0_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_controller_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_controller_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_controller_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_controller_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_controller_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_controller_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	nios_hps_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (pll_0_outclk1_clk),                                //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                                 //      sink.ready
		.sink_channel        (router_src_channel),                               //          .channel
		.sink_data           (router_src_data),                                  //          .data
		.sink_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                           //          .endofpacket
		.sink_valid          (router_src_valid),                                 //          .valid
		.src0_ready          (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                             //          .valid
		.src0_data           (cmd_demux_src0_data),                              //          .data
		.src0_channel        (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                             //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                             //          .valid
		.src1_data           (cmd_demux_src1_data),                              //          .data
		.src1_channel        (cmd_demux_src1_channel),                           //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                             //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                             //          .valid
		.src2_data           (cmd_demux_src2_data),                              //          .data
		.src2_channel        (cmd_demux_src2_channel),                           //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                             //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                             //          .valid
		.src3_data           (cmd_demux_src3_data),                              //          .data
		.src3_channel        (cmd_demux_src3_channel),                           //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                             //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                             //          .valid
		.src4_data           (cmd_demux_src4_data),                              //          .data
		.src4_channel        (cmd_demux_src4_channel),                           //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                             //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                             //          .valid
		.src5_data           (cmd_demux_src5_data),                              //          .data
		.src5_channel        (cmd_demux_src5_channel),                           //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                       //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                             //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                             //          .valid
		.src6_data           (cmd_demux_src6_data),                              //          .data
		.src6_channel        (cmd_demux_src6_channel),                           //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                       //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                             //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                             //          .valid
		.src7_data           (cmd_demux_src7_data),                              //          .data
		.src7_channel        (cmd_demux_src7_channel),                           //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                       //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                             //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                             //          .valid
		.src8_data           (cmd_demux_src8_data),                              //          .data
		.src8_channel        (cmd_demux_src8_channel),                           //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                       //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                             //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                             //          .valid
		.src9_data           (cmd_demux_src9_data),                              //          .data
		.src9_channel        (cmd_demux_src9_channel),                           //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                       //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                            //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                            //          .valid
		.src10_data          (cmd_demux_src10_data),                             //          .data
		.src10_channel       (cmd_demux_src10_channel),                          //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                    //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                      //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                            //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                            //          .valid
		.src11_data          (cmd_demux_src11_data),                             //          .data
		.src11_channel       (cmd_demux_src11_channel),                          //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                    //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                      //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                            //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                            //          .valid
		.src12_data          (cmd_demux_src12_data),                             //          .data
		.src12_channel       (cmd_demux_src12_channel),                          //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                    //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                      //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                            //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                            //          .valid
		.src13_data          (cmd_demux_src13_data),                             //          .data
		.src13_channel       (cmd_demux_src13_channel),                          //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                    //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                      //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                            //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                            //          .valid
		.src14_data          (cmd_demux_src14_data),                             //          .data
		.src14_channel       (cmd_demux_src14_channel),                          //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                    //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                      //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                            //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                            //          .valid
		.src15_data          (cmd_demux_src15_data),                             //          .data
		.src15_channel       (cmd_demux_src15_channel),                          //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                    //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                      //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                            //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                            //          .valid
		.src16_data          (cmd_demux_src16_data),                             //          .data
		.src16_channel       (cmd_demux_src16_channel),                          //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                    //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                      //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                            //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                            //          .valid
		.src17_data          (cmd_demux_src17_data),                             //          .data
		.src17_channel       (cmd_demux_src17_channel),                          //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                    //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                      //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                            //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                            //          .valid
		.src18_data          (cmd_demux_src18_data),                             //          .data
		.src18_channel       (cmd_demux_src18_channel),                          //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                    //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket)                       //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (pll_0_outclk1_clk),                                //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_001_src1_data),                          //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_out_valid),                             //          .valid
		.sink0_channel       (crosser_out_channel),                           //          .channel
		.sink0_data          (crosser_out_data),                              //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                        //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                         //          .valid
		.sink0_channel       (crosser_001_out_channel),                       //          .channel
		.sink0_data          (crosser_001_out_data),                          //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                         //          .valid
		.sink0_channel       (crosser_002_out_channel),                       //          .channel
		.sink0_data          (crosser_002_out_data),                          //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (pll_0_outclk1_clk),                                //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (pll_0_outclk1_clk),                                //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                           //          .channel
		.sink0_data          (cmd_demux_src4_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                         //          .valid
		.src_data            (cmd_mux_005_src_data),                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                         //          .valid
		.sink0_channel       (crosser_003_out_channel),                       //          .channel
		.sink0_data          (crosser_003_out_data),                          //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                         //          .valid
		.sink0_channel       (crosser_004_out_channel),                       //          .channel
		.sink0_data          (crosser_004_out_data),                          //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                         //          .valid
		.sink0_channel       (crosser_005_out_channel),                       //          .channel
		.sink0_data          (crosser_005_out_data),                          //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                         //          .valid
		.sink0_channel       (crosser_006_out_channel),                       //          .channel
		.sink0_data          (crosser_006_out_data),                          //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //          .valid
		.src_data            (cmd_mux_009_src_data),                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                         //          .valid
		.sink0_channel       (crosser_007_out_channel),                       //          .channel
		.sink0_data          (crosser_007_out_data),                          //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                         //          .valid
		.sink0_channel       (crosser_008_out_channel),                       //          .channel
		.sink0_data          (crosser_008_out_data),                          //          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                         //          .valid
		.sink0_channel       (crosser_009_out_channel),                       //          .channel
		.sink0_data          (crosser_009_out_data),                          //          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //          .valid
		.src_data            (cmd_mux_012_src_data),                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                         //          .valid
		.sink0_channel       (crosser_010_out_channel),                       //          .channel
		.sink0_data          (crosser_010_out_data),                          //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                         //          .valid
		.sink0_channel       (crosser_011_out_channel),                       //          .channel
		.sink0_data          (crosser_011_out_data),                          //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_012_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_012_out_valid),                         //          .valid
		.sink0_channel       (crosser_012_out_channel),                       //          .channel
		.sink0_data          (crosser_012_out_data),                          //          .data
		.sink0_startofpacket (crosser_012_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_012_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                         //          .valid
		.src_data            (cmd_mux_015_src_data),                          //          .data
		.src_channel         (cmd_mux_015_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                         //          .valid
		.sink0_channel       (crosser_013_out_channel),                       //          .channel
		.sink0_data          (crosser_013_out_data),                          //          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //          .valid
		.src_data            (cmd_mux_016_src_data),                          //          .data
		.src_channel         (cmd_mux_016_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_014_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_014_out_valid),                         //          .valid
		.sink0_channel       (crosser_014_out_channel),                       //          .channel
		.sink0_data          (crosser_014_out_data),                          //          .data
		.sink0_startofpacket (crosser_014_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_014_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                         //          .valid
		.src_data            (cmd_mux_017_src_data),                          //          .data
		.src_channel         (cmd_mux_017_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_015_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_015_out_valid),                         //          .valid
		.sink0_channel       (crosser_015_out_channel),                       //          .channel
		.sink0_data          (crosser_015_out_data),                          //          .data
		.sink0_startofpacket (crosser_015_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_015_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                         //          .valid
		.src_data            (cmd_mux_018_src_data),                          //          .data
		.src_channel         (cmd_mux_018_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_016_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_016_out_valid),                         //          .valid
		.sink0_channel       (crosser_016_out_channel),                       //          .channel
		.sink0_data          (crosser_016_out_data),                          //          .data
		.sink0_startofpacket (crosser_016_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_016_out_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //      sink.ready
		.sink_channel       (router_003_src_channel),                        //          .channel
		.sink_data          (router_003_src_data),                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //      sink.ready
		.sink_channel       (router_004_src_channel),                        //          .channel
		.sink_data          (router_004_src_data),                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_demux_001 rsp_demux_003 (
		.clk                (pll_0_outclk1_clk),                                //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_003_src1_data),                          //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                    //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_cmd_demux_001 rsp_demux_004 (
		.clk                (pll_0_outclk1_clk),                                         //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (sdram_controller_0_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_controller_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_controller_0_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_controller_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_controller_0_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_controller_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                             //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //      sink.ready
		.sink_channel       (router_012_src_channel),                        //          .channel
		.sink_data          (router_012_src_data),                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_010_src0_data),                       //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //      sink.ready
		.sink_channel       (router_014_src_channel),                        //          .channel
		.sink_data          (router_014_src_data),                           //          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_014_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                          //      sink.ready
		.sink_channel       (router_016_src_channel),                        //          .channel
		.sink_data          (router_016_src_data),                           //          .data
		.sink_startofpacket (router_016_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_016_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //      sink.ready
		.sink_channel       (router_017_src_channel),                        //          .channel
		.sink_data          (router_017_src_data),                           //          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_017_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                          //      sink.ready
		.sink_channel       (router_019_src_channel),                        //          .channel
		.sink_data          (router_019_src_data),                           //          .data
		.sink_startofpacket (router_019_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_019_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_017_src0_data),                       //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                          //      sink.ready
		.sink_channel       (router_020_src_channel),                        //          .channel
		.sink_data          (router_020_src_data),                           //          .data
		.sink_startofpacket (router_020_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_020_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                 //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (pll_0_outclk1_clk),                                //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                //       src.ready
		.src_valid            (rsp_mux_src_valid),                                //          .valid
		.src_data             (rsp_mux_src_data),                                 //          .data
		.src_channel          (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready          (crosser_017_out_ready),                            //     sink0.ready
		.sink0_valid          (crosser_017_out_valid),                            //          .valid
		.sink0_channel        (crosser_017_out_channel),                          //          .channel
		.sink0_data           (crosser_017_out_data),                             //          .data
		.sink0_startofpacket  (crosser_017_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket    (crosser_017_out_endofpacket),                      //          .endofpacket
		.sink1_ready          (crosser_018_out_ready),                            //     sink1.ready
		.sink1_valid          (crosser_018_out_valid),                            //          .valid
		.sink1_channel        (crosser_018_out_channel),                          //          .channel
		.sink1_data           (crosser_018_out_data),                             //          .data
		.sink1_startofpacket  (crosser_018_out_startofpacket),                    //          .startofpacket
		.sink1_endofpacket    (crosser_018_out_endofpacket),                      //          .endofpacket
		.sink2_ready          (crosser_019_out_ready),                            //     sink2.ready
		.sink2_valid          (crosser_019_out_valid),                            //          .valid
		.sink2_channel        (crosser_019_out_channel),                          //          .channel
		.sink2_data           (crosser_019_out_data),                             //          .data
		.sink2_startofpacket  (crosser_019_out_startofpacket),                    //          .startofpacket
		.sink2_endofpacket    (crosser_019_out_endofpacket),                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                         //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                       //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                          //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                         //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                         //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                       //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                          //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.sink5_ready          (crosser_020_out_ready),                            //     sink5.ready
		.sink5_valid          (crosser_020_out_valid),                            //          .valid
		.sink5_channel        (crosser_020_out_channel),                          //          .channel
		.sink5_data           (crosser_020_out_data),                             //          .data
		.sink5_startofpacket  (crosser_020_out_startofpacket),                    //          .startofpacket
		.sink5_endofpacket    (crosser_020_out_endofpacket),                      //          .endofpacket
		.sink6_ready          (crosser_021_out_ready),                            //     sink6.ready
		.sink6_valid          (crosser_021_out_valid),                            //          .valid
		.sink6_channel        (crosser_021_out_channel),                          //          .channel
		.sink6_data           (crosser_021_out_data),                             //          .data
		.sink6_startofpacket  (crosser_021_out_startofpacket),                    //          .startofpacket
		.sink6_endofpacket    (crosser_021_out_endofpacket),                      //          .endofpacket
		.sink7_ready          (crosser_022_out_ready),                            //     sink7.ready
		.sink7_valid          (crosser_022_out_valid),                            //          .valid
		.sink7_channel        (crosser_022_out_channel),                          //          .channel
		.sink7_data           (crosser_022_out_data),                             //          .data
		.sink7_startofpacket  (crosser_022_out_startofpacket),                    //          .startofpacket
		.sink7_endofpacket    (crosser_022_out_endofpacket),                      //          .endofpacket
		.sink8_ready          (crosser_023_out_ready),                            //     sink8.ready
		.sink8_valid          (crosser_023_out_valid),                            //          .valid
		.sink8_channel        (crosser_023_out_channel),                          //          .channel
		.sink8_data           (crosser_023_out_data),                             //          .data
		.sink8_startofpacket  (crosser_023_out_startofpacket),                    //          .startofpacket
		.sink8_endofpacket    (crosser_023_out_endofpacket),                      //          .endofpacket
		.sink9_ready          (crosser_024_out_ready),                            //     sink9.ready
		.sink9_valid          (crosser_024_out_valid),                            //          .valid
		.sink9_channel        (crosser_024_out_channel),                          //          .channel
		.sink9_data           (crosser_024_out_data),                             //          .data
		.sink9_startofpacket  (crosser_024_out_startofpacket),                    //          .startofpacket
		.sink9_endofpacket    (crosser_024_out_endofpacket),                      //          .endofpacket
		.sink10_ready         (crosser_025_out_ready),                            //    sink10.ready
		.sink10_valid         (crosser_025_out_valid),                            //          .valid
		.sink10_channel       (crosser_025_out_channel),                          //          .channel
		.sink10_data          (crosser_025_out_data),                             //          .data
		.sink10_startofpacket (crosser_025_out_startofpacket),                    //          .startofpacket
		.sink10_endofpacket   (crosser_025_out_endofpacket),                      //          .endofpacket
		.sink11_ready         (crosser_026_out_ready),                            //    sink11.ready
		.sink11_valid         (crosser_026_out_valid),                            //          .valid
		.sink11_channel       (crosser_026_out_channel),                          //          .channel
		.sink11_data          (crosser_026_out_data),                             //          .data
		.sink11_startofpacket (crosser_026_out_startofpacket),                    //          .startofpacket
		.sink11_endofpacket   (crosser_026_out_endofpacket),                      //          .endofpacket
		.sink12_ready         (crosser_027_out_ready),                            //    sink12.ready
		.sink12_valid         (crosser_027_out_valid),                            //          .valid
		.sink12_channel       (crosser_027_out_channel),                          //          .channel
		.sink12_data          (crosser_027_out_data),                             //          .data
		.sink12_startofpacket (crosser_027_out_startofpacket),                    //          .startofpacket
		.sink12_endofpacket   (crosser_027_out_endofpacket),                      //          .endofpacket
		.sink13_ready         (crosser_028_out_ready),                            //    sink13.ready
		.sink13_valid         (crosser_028_out_valid),                            //          .valid
		.sink13_channel       (crosser_028_out_channel),                          //          .channel
		.sink13_data          (crosser_028_out_data),                             //          .data
		.sink13_startofpacket (crosser_028_out_startofpacket),                    //          .startofpacket
		.sink13_endofpacket   (crosser_028_out_endofpacket),                      //          .endofpacket
		.sink14_ready         (crosser_029_out_ready),                            //    sink14.ready
		.sink14_valid         (crosser_029_out_valid),                            //          .valid
		.sink14_channel       (crosser_029_out_channel),                          //          .channel
		.sink14_data          (crosser_029_out_data),                             //          .data
		.sink14_startofpacket (crosser_029_out_startofpacket),                    //          .startofpacket
		.sink14_endofpacket   (crosser_029_out_endofpacket),                      //          .endofpacket
		.sink15_ready         (crosser_030_out_ready),                            //    sink15.ready
		.sink15_valid         (crosser_030_out_valid),                            //          .valid
		.sink15_channel       (crosser_030_out_channel),                          //          .channel
		.sink15_data          (crosser_030_out_data),                             //          .data
		.sink15_startofpacket (crosser_030_out_startofpacket),                    //          .startofpacket
		.sink15_endofpacket   (crosser_030_out_endofpacket),                      //          .endofpacket
		.sink16_ready         (crosser_031_out_ready),                            //    sink16.ready
		.sink16_valid         (crosser_031_out_valid),                            //          .valid
		.sink16_channel       (crosser_031_out_channel),                          //          .channel
		.sink16_data          (crosser_031_out_data),                             //          .data
		.sink16_startofpacket (crosser_031_out_startofpacket),                    //          .startofpacket
		.sink16_endofpacket   (crosser_031_out_endofpacket),                      //          .endofpacket
		.sink17_ready         (crosser_032_out_ready),                            //    sink17.ready
		.sink17_valid         (crosser_032_out_valid),                            //          .valid
		.sink17_channel       (crosser_032_out_channel),                          //          .channel
		.sink17_data          (crosser_032_out_data),                             //          .data
		.sink17_startofpacket (crosser_032_out_startofpacket),                    //          .startofpacket
		.sink17_endofpacket   (crosser_032_out_endofpacket),                      //          .endofpacket
		.sink18_ready         (crosser_033_out_ready),                            //    sink18.ready
		.sink18_valid         (crosser_033_out_valid),                            //          .valid
		.sink18_channel       (crosser_033_out_channel),                          //          .channel
		.sink18_data          (crosser_033_out_data),                             //          .data
		.sink18_startofpacket (crosser_033_out_startofpacket),                    //          .startofpacket
		.sink18_endofpacket   (crosser_033_out_endofpacket)                       //          .endofpacket
	);

	nios_hps_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (pll_0_outclk1_clk),                                //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //          .valid
		.src_data            (rsp_mux_001_src_data),                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_003_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_004_src1_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_004_src1_valid),                         //          .valid
		.sink1_channel       (rsp_demux_004_src1_channel),                       //          .channel
		.sink1_data          (rsp_demux_004_src1_data),                          //          .data
		.sink1_startofpacket (rsp_demux_004_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src1_endofpacket)                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (45),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (54),
		.IN_PKT_BYTE_CNT_L             (52),
		.IN_PKT_TRANS_COMPRESSED_READ  (46),
		.IN_PKT_TRANS_WRITE            (48),
		.IN_PKT_BURSTWRAP_H            (57),
		.IN_PKT_BURSTWRAP_L            (55),
		.IN_PKT_BURST_SIZE_H           (60),
		.IN_PKT_BURST_SIZE_L           (58),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (51),
		.IN_PKT_BURST_TYPE_H           (62),
		.IN_PKT_BURST_TYPE_L           (61),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (63),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (72),
		.OUT_PKT_BYTE_CNT_L            (70),
		.OUT_PKT_TRANS_COMPRESSED_READ (64),
		.OUT_PKT_BURST_SIZE_H          (78),
		.OUT_PKT_BURST_SIZE_L          (76),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (69),
		.OUT_PKT_BURST_TYPE_H          (80),
		.OUT_PKT_BURST_TYPE_L          (79),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_0_s1_rsp_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                         //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_006_src_valid),                                      //      sink.valid
		.in_channel           (router_006_src_channel),                                    //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_006_src_ready),                                      //          .ready
		.in_data              (router_006_src_data),                                       //          .data
		.out_endofpacket      (sdram_controller_0_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_0_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_0_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (63),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (72),
		.IN_PKT_BYTE_CNT_L             (70),
		.IN_PKT_TRANS_COMPRESSED_READ  (64),
		.IN_PKT_TRANS_WRITE            (66),
		.IN_PKT_BURSTWRAP_H            (75),
		.IN_PKT_BURSTWRAP_L            (73),
		.IN_PKT_BURST_SIZE_H           (78),
		.IN_PKT_BURST_SIZE_L           (76),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (69),
		.IN_PKT_BURST_TYPE_H           (80),
		.IN_PKT_BURST_TYPE_L           (79),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (45),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (54),
		.OUT_PKT_BYTE_CNT_L            (52),
		.OUT_PKT_TRANS_COMPRESSED_READ (46),
		.OUT_PKT_BURST_SIZE_H          (60),
		.OUT_PKT_BURST_SIZE_L          (58),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (51),
		.OUT_PKT_BURST_TYPE_H          (62),
		.OUT_PKT_BURST_TYPE_L          (61),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_0_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                         //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                     //          .ready
		.in_data              (cmd_mux_004_src_data),                                      //          .data
		.out_endofpacket      (sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                             //            in.ready
		.in_valid          (cmd_demux_src0_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                           //              .channel
		.in_data           (cmd_demux_src0_data),                              //              .data
		.out_ready         (crosser_out_ready),                                //           out.ready
		.out_valid         (crosser_out_valid),                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_out_channel),                              //              .channel
		.out_data          (crosser_out_data),                                 //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                             //            in.ready
		.in_valid          (cmd_demux_src1_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                           //              .channel
		.in_data           (cmd_demux_src1_data),                              //              .data
		.out_ready         (crosser_001_out_ready),                            //           out.ready
		.out_valid         (crosser_001_out_valid),                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                          //              .channel
		.out_data          (crosser_001_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                             //            in.ready
		.in_valid          (cmd_demux_src2_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                           //              .channel
		.in_data           (cmd_demux_src2_data),                              //              .data
		.out_ready         (crosser_002_out_ready),                            //           out.ready
		.out_valid         (crosser_002_out_valid),                            //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_002_out_channel),                          //              .channel
		.out_data          (crosser_002_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                             //            in.ready
		.in_valid          (cmd_demux_src5_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                           //              .channel
		.in_data           (cmd_demux_src5_data),                              //              .data
		.out_ready         (crosser_003_out_ready),                            //           out.ready
		.out_valid         (crosser_003_out_valid),                            //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_003_out_channel),                          //              .channel
		.out_data          (crosser_003_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                             //            in.ready
		.in_valid          (cmd_demux_src6_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                           //              .channel
		.in_data           (cmd_demux_src6_data),                              //              .data
		.out_ready         (crosser_004_out_ready),                            //           out.ready
		.out_valid         (crosser_004_out_valid),                            //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_004_out_channel),                          //              .channel
		.out_data          (crosser_004_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                             //            in.ready
		.in_valid          (cmd_demux_src7_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                           //              .channel
		.in_data           (cmd_demux_src7_data),                              //              .data
		.out_ready         (crosser_005_out_ready),                            //           out.ready
		.out_valid         (crosser_005_out_valid),                            //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_005_out_channel),                          //              .channel
		.out_data          (crosser_005_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                             //            in.ready
		.in_valid          (cmd_demux_src8_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                           //              .channel
		.in_data           (cmd_demux_src8_data),                              //              .data
		.out_ready         (crosser_006_out_ready),                            //           out.ready
		.out_valid         (crosser_006_out_valid),                            //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_006_out_channel),                          //              .channel
		.out_data          (crosser_006_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                             //            in.ready
		.in_valid          (cmd_demux_src9_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                           //              .channel
		.in_data           (cmd_demux_src9_data),                              //              .data
		.out_ready         (crosser_007_out_ready),                            //           out.ready
		.out_valid         (crosser_007_out_valid),                            //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_007_out_channel),                          //              .channel
		.out_data          (crosser_007_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src10_ready),                            //            in.ready
		.in_valid          (cmd_demux_src10_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src10_channel),                          //              .channel
		.in_data           (cmd_demux_src10_data),                             //              .data
		.out_ready         (crosser_008_out_ready),                            //           out.ready
		.out_valid         (crosser_008_out_valid),                            //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_008_out_channel),                          //              .channel
		.out_data          (crosser_008_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src11_ready),                            //            in.ready
		.in_valid          (cmd_demux_src11_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src11_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src11_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src11_channel),                          //              .channel
		.in_data           (cmd_demux_src11_data),                             //              .data
		.out_ready         (crosser_009_out_ready),                            //           out.ready
		.out_valid         (crosser_009_out_valid),                            //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_009_out_channel),                          //              .channel
		.out_data          (crosser_009_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src12_ready),                            //            in.ready
		.in_valid          (cmd_demux_src12_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src12_channel),                          //              .channel
		.in_data           (cmd_demux_src12_data),                             //              .data
		.out_ready         (crosser_010_out_ready),                            //           out.ready
		.out_valid         (crosser_010_out_valid),                            //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_010_out_channel),                          //              .channel
		.out_data          (crosser_010_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src13_ready),                            //            in.ready
		.in_valid          (cmd_demux_src13_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src13_channel),                          //              .channel
		.in_data           (cmd_demux_src13_data),                             //              .data
		.out_ready         (crosser_011_out_ready),                            //           out.ready
		.out_valid         (crosser_011_out_valid),                            //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_011_out_channel),                          //              .channel
		.out_data          (crosser_011_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src14_ready),                            //            in.ready
		.in_valid          (cmd_demux_src14_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src14_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src14_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src14_channel),                          //              .channel
		.in_data           (cmd_demux_src14_data),                             //              .data
		.out_ready         (crosser_012_out_ready),                            //           out.ready
		.out_valid         (crosser_012_out_valid),                            //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_012_out_channel),                          //              .channel
		.out_data          (crosser_012_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src15_ready),                            //            in.ready
		.in_valid          (cmd_demux_src15_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src15_channel),                          //              .channel
		.in_data           (cmd_demux_src15_data),                             //              .data
		.out_ready         (crosser_013_out_ready),                            //           out.ready
		.out_valid         (crosser_013_out_valid),                            //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_013_out_channel),                          //              .channel
		.out_data          (crosser_013_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src16_ready),                            //            in.ready
		.in_valid          (cmd_demux_src16_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src16_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src16_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src16_channel),                          //              .channel
		.in_data           (cmd_demux_src16_data),                             //              .data
		.out_ready         (crosser_014_out_ready),                            //           out.ready
		.out_valid         (crosser_014_out_valid),                            //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_014_out_channel),                          //              .channel
		.out_data          (crosser_014_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src17_ready),                            //            in.ready
		.in_valid          (cmd_demux_src17_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src17_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src17_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src17_channel),                          //              .channel
		.in_data           (cmd_demux_src17_data),                             //              .data
		.out_ready         (crosser_015_out_ready),                            //           out.ready
		.out_valid         (crosser_015_out_valid),                            //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_015_out_channel),                          //              .channel
		.out_data          (crosser_015_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (pll_0_outclk1_clk),                                //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src18_ready),                            //            in.ready
		.in_valid          (cmd_demux_src18_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src18_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src18_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src18_channel),                          //              .channel
		.in_data           (cmd_demux_src18_data),                             //              .data
		.out_ready         (crosser_016_out_ready),                            //           out.ready
		.out_valid         (crosser_016_out_valid),                            //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_016_out_channel),                          //              .channel
		.out_data          (crosser_016_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                           //              .channel
		.in_data           (rsp_demux_src0_data),                              //              .data
		.out_ready         (crosser_017_out_ready),                            //           out.ready
		.out_valid         (crosser_017_out_valid),                            //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_017_out_channel),                          //              .channel
		.out_data          (crosser_017_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                       //              .channel
		.in_data           (rsp_demux_001_src0_data),                          //              .data
		.out_ready         (crosser_018_out_ready),                            //           out.ready
		.out_valid         (crosser_018_out_valid),                            //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_018_out_channel),                          //              .channel
		.out_data          (crosser_018_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                       //              .channel
		.in_data           (rsp_demux_002_src0_data),                          //              .data
		.out_ready         (crosser_019_out_ready),                            //           out.ready
		.out_valid         (crosser_019_out_valid),                            //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_019_out_channel),                          //              .channel
		.out_data          (crosser_019_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                       //              .channel
		.in_data           (rsp_demux_005_src0_data),                          //              .data
		.out_ready         (crosser_020_out_ready),                            //           out.ready
		.out_valid         (crosser_020_out_valid),                            //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_020_out_channel),                          //              .channel
		.out_data          (crosser_020_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                       //              .channel
		.in_data           (rsp_demux_006_src0_data),                          //              .data
		.out_ready         (crosser_021_out_ready),                            //           out.ready
		.out_valid         (crosser_021_out_valid),                            //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_021_out_channel),                          //              .channel
		.out_data          (crosser_021_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                       //              .channel
		.in_data           (rsp_demux_007_src0_data),                          //              .data
		.out_ready         (crosser_022_out_ready),                            //           out.ready
		.out_valid         (crosser_022_out_valid),                            //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_022_out_channel),                          //              .channel
		.out_data          (crosser_022_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                       //              .channel
		.in_data           (rsp_demux_008_src0_data),                          //              .data
		.out_ready         (crosser_023_out_ready),                            //           out.ready
		.out_valid         (crosser_023_out_valid),                            //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_023_out_channel),                          //              .channel
		.out_data          (crosser_023_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_024 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                       //              .channel
		.in_data           (rsp_demux_009_src0_data),                          //              .data
		.out_ready         (crosser_024_out_ready),                            //           out.ready
		.out_valid         (crosser_024_out_valid),                            //              .valid
		.out_startofpacket (crosser_024_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_024_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_024_out_channel),                          //              .channel
		.out_data          (crosser_024_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_025 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                       //              .channel
		.in_data           (rsp_demux_010_src0_data),                          //              .data
		.out_ready         (crosser_025_out_ready),                            //           out.ready
		.out_valid         (crosser_025_out_valid),                            //              .valid
		.out_startofpacket (crosser_025_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_025_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_025_out_channel),                          //              .channel
		.out_data          (crosser_025_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_026 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_011_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_011_src0_channel),                       //              .channel
		.in_data           (rsp_demux_011_src0_data),                          //              .data
		.out_ready         (crosser_026_out_ready),                            //           out.ready
		.out_valid         (crosser_026_out_valid),                            //              .valid
		.out_startofpacket (crosser_026_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_026_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_026_out_channel),                          //              .channel
		.out_data          (crosser_026_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_027 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                       //              .channel
		.in_data           (rsp_demux_012_src0_data),                          //              .data
		.out_ready         (crosser_027_out_ready),                            //           out.ready
		.out_valid         (crosser_027_out_valid),                            //              .valid
		.out_startofpacket (crosser_027_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_027_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_027_out_channel),                          //              .channel
		.out_data          (crosser_027_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_028 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_013_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_013_src0_channel),                       //              .channel
		.in_data           (rsp_demux_013_src0_data),                          //              .data
		.out_ready         (crosser_028_out_ready),                            //           out.ready
		.out_valid         (crosser_028_out_valid),                            //              .valid
		.out_startofpacket (crosser_028_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_028_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_028_out_channel),                          //              .channel
		.out_data          (crosser_028_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_029 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_014_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_014_src0_channel),                       //              .channel
		.in_data           (rsp_demux_014_src0_data),                          //              .data
		.out_ready         (crosser_029_out_ready),                            //           out.ready
		.out_valid         (crosser_029_out_valid),                            //              .valid
		.out_startofpacket (crosser_029_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_029_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_029_out_channel),                          //              .channel
		.out_data          (crosser_029_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_030 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_015_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_015_src0_channel),                       //              .channel
		.in_data           (rsp_demux_015_src0_data),                          //              .data
		.out_ready         (crosser_030_out_ready),                            //           out.ready
		.out_valid         (crosser_030_out_valid),                            //              .valid
		.out_startofpacket (crosser_030_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_030_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_030_out_channel),                          //              .channel
		.out_data          (crosser_030_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_031 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_016_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_016_src0_channel),                       //              .channel
		.in_data           (rsp_demux_016_src0_data),                          //              .data
		.out_ready         (crosser_031_out_ready),                            //           out.ready
		.out_valid         (crosser_031_out_valid),                            //              .valid
		.out_startofpacket (crosser_031_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_031_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_031_out_channel),                          //              .channel
		.out_data          (crosser_031_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_032 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_017_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_017_src0_channel),                       //              .channel
		.in_data           (rsp_demux_017_src0_data),                          //              .data
		.out_ready         (crosser_032_out_ready),                            //           out.ready
		.out_valid         (crosser_032_out_valid),                            //              .valid
		.out_startofpacket (crosser_032_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_032_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_032_out_channel),                          //              .channel
		.out_data          (crosser_032_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_033 (
		.in_clk            (pll_0_outclk0_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_018_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_018_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_018_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_018_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_018_src0_channel),                       //              .channel
		.in_data           (rsp_demux_018_src0_data),                          //              .data
		.out_ready         (crosser_033_out_ready),                            //           out.ready
		.out_valid         (crosser_033_out_valid),                            //              .valid
		.out_startofpacket (crosser_033_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_033_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_033_out_channel),                          //              .channel
		.out_data          (crosser_033_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_0_csr_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (i2c_0_csr_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (i2c_0_csr_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk1_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                          //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter_004 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_0_outclk1_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_0_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sdram_controller_0_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sdram_controller_0_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                 //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_leds_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (nios_leds_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (nios_leds_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_switches_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (nios_switches_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (nios_switches_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_buttons_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (nios_buttons_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (nios_buttons_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_uartrx_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (nios_uartrx_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (nios_uartrx_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_i2cclk_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (nios_i2cclk_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (nios_i2cclk_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_uarttx_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (nios_uarttx_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (nios_uarttx_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_i2cdat_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (nios_i2cdat_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (nios_i2cdat_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_i2crw_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (nios_i2crw_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (nios_i2crw_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_7seg_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (nios_7seg_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (nios_7seg_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (nios_header_conn_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios_header_conn_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios_header_conn_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)               //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart_0_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (uart_0_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (uart_0_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios_oscdivisor_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios_oscdivisor_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios_oscdivisor_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)              //         .error
	);

	nios_hps_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (spi_0_spi_control_port_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (spi_0_spi_control_port_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (spi_0_spi_control_port_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                  //         .error
	);

endmodule
